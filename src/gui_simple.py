import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import os
import sys
import time
from datetime import datetime
import json

# Import translate functions
try:
    from translate import (
        translate_file_optimized, generate_output_filename,
        process_chunk, save_progress, get_progress, 
        CHUNK_SIZE_LINES, NUM_WORKERS, PROGRESS_FILE_SUFFIX
    )
    from reformat import fix_text_format
    TRANSLATE_AVAILABLE = True
except ImportError as e:
    TRANSLATE_AVAILABLE = False
    print(f"‚ö†Ô∏è L·ªói import translate: {e}")

# Import epub convert functions
try:
    from ConvertEpub import txt_to_docx, docx_to_epub
    EPUB_AVAILABLE = True
except ImportError as e:
    EPUB_AVAILABLE = False
    print(f"‚ö†Ô∏è L·ªói import ConvertEpub: {e}")

class TranslateApp:
    def __init__(self, root):
        self.root = root
        self.root.title("TranslateNovelAI - D·ªãch Truy·ªán T·ª± ƒê·ªông")
        self.root.geometry("800x600")
        self.root.configure(bg='#f0f0f0')
        
        # Variables
        self.input_file_var = tk.StringVar()
        self.output_file_var = tk.StringVar()
        self.api_key_var = tk.StringVar()
        self.model_var = tk.StringVar(value="gemini-2.0-flash")
        self.auto_reformat_var = tk.BooleanVar(value=True)
        self.auto_convert_epub_var = tk.BooleanVar(value=False)
        self.book_title_var = tk.StringVar()
        self.book_author_var = tk.StringVar(value="Unknown Author")
        self.chapter_pattern_var = tk.StringVar(value=r"^Ch∆∞∆°ng\s+\d+:\s+.*$")
        self.is_translating = False
        self.translation_thread = None
        
        # Progress tracking variables
        self.total_chunks = 0
        self.completed_chunks = 0
        self.start_time = 0
        self.last_update_time = 0
        
        # Setup GUI first
        self.setup_gui()
        
        # Load saved settings after GUI is setup
        self.load_settings()
        
    def setup_gui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ch√≠nh"""
        # Main frame
        main_frame = tk.Frame(self.root, bg='#f0f0f0', padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title_label = tk.Label(
            main_frame, 
            text="ü§ñ TranslateNovelAI", 
            font=("Arial", 20, "bold"),
            bg='#f0f0f0',
            fg='#2c3e50'
        )
        title_label.pack(pady=(0, 20))
        
        # API Key frame
        api_frame = tk.LabelFrame(main_frame, text="üîë API Configuration", 
                                 font=("Arial", 10, "bold"), padx=15, pady=15)
        api_frame.pack(fill=tk.X, pady=(0, 15))
        
        tk.Label(api_frame, text="Google AI API Key:").pack(anchor=tk.W)
        api_entry = tk.Entry(api_frame, textvariable=self.api_key_var, width=60, show="*")
        api_entry.pack(fill=tk.X, pady=(5, 0))
        
        # Bind event ƒë·ªÉ t·ª± ƒë·ªông l∆∞u API key khi thay ƒë·ªïi
        self.api_key_var.trace('w', self.on_api_key_changed)
        
        # Model selection
        model_frame = tk.Frame(api_frame)
        model_frame.pack(fill=tk.X, pady=(10, 0))
        
        tk.Label(model_frame, text="Model:").pack(side=tk.LEFT)
        model_combo = ttk.Combobox(
            model_frame,
            textvariable=self.model_var,
            values=["gemini-2.0-flash", "gemini-1.5-flash", "gemini-1.5-pro"],
            state="readonly",
            width=20
        )
        model_combo.pack(side=tk.LEFT, padx=(10, 0))
        
        # File selection frame
        file_frame = tk.LabelFrame(main_frame, text="üìÅ File Selection", 
                                  font=("Arial", 10, "bold"), padx=15, pady=15)
        file_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Input file
        input_frame = tk.Frame(file_frame)
        input_frame.pack(fill=tk.X, pady=(0, 10))
        
        tk.Label(input_frame, text="Input File:").pack(anchor=tk.W)
        
        input_path_frame = tk.Frame(input_frame)
        input_path_frame.pack(fill=tk.X, pady=(5, 0))
        
        input_entry = tk.Entry(input_path_frame, textvariable=self.input_file_var)
        input_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        input_btn = tk.Button(
            input_path_frame,
            text="Browse",
            command=self.browse_input_file,
            bg='#3498db',
            fg='white',
            relief=tk.FLAT
        )
        input_btn.pack(side=tk.RIGHT, padx=(10, 0))
        
        # Output file
        output_frame = tk.Frame(file_frame)
        output_frame.pack(fill=tk.X)
        
        tk.Label(output_frame, text="Output File (t·ª± ƒë·ªông t·∫°o n·∫øu ƒë·ªÉ tr·ªëng):").pack(anchor=tk.W)
        
        output_path_frame = tk.Frame(output_frame)
        output_path_frame.pack(fill=tk.X, pady=(5, 0))
        
        output_entry = tk.Entry(output_path_frame, textvariable=self.output_file_var)
        output_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        output_btn = tk.Button(
            output_path_frame,
            text="Browse",
            command=self.browse_output_file,
            bg='#3498db',
            fg='white',
            relief=tk.FLAT
        )
        output_btn.pack(side=tk.RIGHT, padx=(10, 0))
        
        # Options frame
        options_frame = tk.LabelFrame(main_frame, text="‚öôÔ∏è Options", 
                                     font=("Arial", 10, "bold"), padx=15, pady=15)
        options_frame.pack(fill=tk.X, pady=(0, 15))
        
        reformat_check = tk.Checkbutton(
            options_frame,
            text="T·ª± ƒë·ªông reformat file sau khi d·ªãch",
            variable=self.auto_reformat_var
        )
        reformat_check.pack(anchor=tk.W)
        
        # EPUB conversion option
        epub_check = tk.Checkbutton(
            options_frame,
            text="T·ª± ƒë·ªông convert sang EPUB sau khi d·ªãch",
            variable=self.auto_convert_epub_var,
            command=self.toggle_epub_options
        )
        epub_check.pack(anchor=tk.W, pady=(5, 0))
        
        # EPUB settings frame (initially hidden)
        self.epub_settings_frame = tk.Frame(options_frame)
        
        # Book title
        title_frame = tk.Frame(self.epub_settings_frame)
        title_frame.pack(fill=tk.X, pady=(5, 0))
        tk.Label(title_frame, text="Ti√™u ƒë·ªÅ s√°ch:").pack(side=tk.LEFT)
        title_entry = tk.Entry(title_frame, textvariable=self.book_title_var, width=30)
        title_entry.pack(side=tk.LEFT, padx=(10, 0))
        
        # Book author
        author_frame = tk.Frame(self.epub_settings_frame)
        author_frame.pack(fill=tk.X, pady=(5, 0))
        tk.Label(author_frame, text="T√°c gi·∫£:").pack(side=tk.LEFT)
        author_entry = tk.Entry(author_frame, textvariable=self.book_author_var, width=30)
        author_entry.pack(side=tk.LEFT, padx=(10, 0))
        
        # Chapter pattern
        pattern_frame = tk.Frame(self.epub_settings_frame)
        pattern_frame.pack(fill=tk.X, pady=(5, 0))
        tk.Label(pattern_frame, text="Pattern ch∆∞∆°ng:").pack(side=tk.LEFT)
        pattern_entry = tk.Entry(pattern_frame, textvariable=self.chapter_pattern_var, width=30)
        pattern_entry.pack(side=tk.LEFT, padx=(10, 0))
        
        # Control buttons
        control_frame = tk.Frame(main_frame)
        control_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.translate_btn = tk.Button(
            control_frame,
            text="üöÄ B·∫Øt ƒê·∫ßu D·ªãch",
            command=self.start_translation,
            bg='#27ae60',
            fg='white',
            font=("Arial", 10, "bold"),
            relief=tk.FLAT,
            width=20
        )
        self.translate_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_btn = tk.Button(
            control_frame,
            text="‚èπÔ∏è D·ª´ng",
            command=self.stop_translation,
            bg='#e74c3c',
            fg='white',
            font=("Arial", 10, "bold"),
            relief=tk.FLAT,
            width=15,
            state=tk.DISABLED
        )
        self.stop_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        save_settings_btn = tk.Button(
            control_frame,
            text="üíæ L∆∞u C√†i ƒê·∫∑t",
            command=self.save_settings,
            bg='#f39c12',
            fg='white',
            font=("Arial", 10, "bold"),
            relief=tk.FLAT,
            width=15
        )
        save_settings_btn.pack(side=tk.RIGHT)
        
        # Progress frame
        progress_frame = tk.LabelFrame(main_frame, text="üìä Progress", 
                                      font=("Arial", 10, "bold"), padx=15, pady=15)
        progress_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Status text
        self.progress_var = tk.StringVar(value="S·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu...")
        self.progress_label = tk.Label(progress_frame, textvariable=self.progress_var)
        self.progress_label.pack(anchor=tk.W, pady=(0, 5))
        
        # Progress bar (determinate mode)
        self.progress_bar = ttk.Progressbar(progress_frame, mode='determinate', maximum=100)
        self.progress_bar.pack(fill=tk.X, pady=(0, 5))
        
        # Progress details frame
        details_frame = tk.Frame(progress_frame)
        details_frame.pack(fill=tk.X)
        
        # Progress percentage and ETA
        self.progress_details_var = tk.StringVar(value="")
        self.progress_details_label = tk.Label(details_frame, textvariable=self.progress_details_var, 
                                              font=("Arial", 9), fg="#666666")
        self.progress_details_label.pack(side=tk.LEFT)
        
        # Speed info
        self.speed_var = tk.StringVar(value="")
        self.speed_label = tk.Label(details_frame, textvariable=self.speed_var, 
                                   font=("Arial", 9), fg="#666666")
        self.speed_label.pack(side=tk.RIGHT)
        
        # Log frame
        log_frame = tk.LabelFrame(main_frame, text="üìù Logs", 
                                 font=("Arial", 10, "bold"), padx=15, pady=15)
        log_frame.pack(fill=tk.BOTH, expand=True)
        
        self.log_text = scrolledtext.ScrolledText(
            log_frame,
            height=10,
            font=("Consolas", 9),
            wrap=tk.WORD
        )
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
    def browse_input_file(self):
        """Ch·ªçn file input"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file truy·ªán c·∫ßn d·ªãch",
            filetypes=[
                ("Text files", "*.txt"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            self.input_file_var.set(file_path)
            # T·ª± ƒë·ªông t·∫°o output filename
            if not self.output_file_var.get():
                output_path = generate_output_filename(file_path)
                self.output_file_var.set(output_path)
            
            # T·ª± ƒë·ªông t·∫°o t√™n s√°ch t·ª´ t√™n file
            if not self.book_title_var.get():
                file_name = os.path.splitext(os.path.basename(file_path))[0]
                # Lo·∫°i b·ªè "_TranslateAI" n·∫øu c√≥
                clean_name = file_name.replace("_TranslateAI", "")
                self.book_title_var.set(clean_name)
    
    def browse_output_file(self):
        """Ch·ªçn file output"""
        file_path = filedialog.asksaveasfilename(
            title="Ch·ªçn n∆°i l∆∞u file ƒë√£ d·ªãch",
            defaultextension=".txt",
            filetypes=[
                ("Text files", "*.txt"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            self.output_file_var.set(file_path)
    
    def toggle_epub_options(self):
        """Hi·ªán/·∫©n EPUB settings khi checkbox ƒë∆∞·ª£c b·∫≠t/t·∫Øt"""
        if self.auto_convert_epub_var.get():
            self.epub_settings_frame.pack(fill=tk.X, pady=(10, 0))
        else:
            self.epub_settings_frame.pack_forget()
    
    def on_api_key_changed(self, *args):
        """T·ª± ƒë·ªông l∆∞u API key khi thay ƒë·ªïi"""
        # Ch·ªâ l∆∞u n·∫øu API key kh√¥ng r·ªóng v√† c√≥ ƒë·ªô d√†i h·ª£p l√Ω
        api_key = self.api_key_var.get().strip()
        if len(api_key) > 10:  # API key Google AI th∆∞·ªùng d√†i h∆°n 10 k√Ω t·ª±
            self.auto_save_settings()
    
    def log(self, message):
        """Ghi log v√†o text area"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        
        self.log_text.insert(tk.END, log_message)
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def format_time(self, seconds):
        """Format seconds th√†nh HH:MM:SS"""
        if seconds < 0:
            return "00:00:00"
        
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        
        if hours > 0:
            return f"{hours:02d}:{minutes:02d}:{secs:02d}"
        else:
            return f"{minutes:02d}:{secs:02d}"
    
    def update_progress(self, completed, total, start_time=None):
        """C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh v√† th√¥ng tin chi ti·∫øt"""
        if total == 0:
            return
            
        # T√≠nh ph·∫ßn trƒÉm
        percentage = (completed / total) * 100
        self.progress_bar['value'] = percentage
        
        # C·∫≠p nh·∫≠t th·ªùi gian
        current_time = time.time()
        if start_time is None:
            start_time = self.start_time
        
        elapsed_time = current_time - start_time
        
        # T√≠nh ETA
        if completed > 0 and elapsed_time > 0:
            avg_time_per_chunk = elapsed_time / completed
            remaining_chunks = total - completed
            eta_seconds = avg_time_per_chunk * remaining_chunks
            eta_str = self.format_time(eta_seconds)
        else:
            eta_str = "ƒêang t√≠nh..."
        
        # T√≠nh t·ªëc ƒë·ªô
        if elapsed_time > 0:
            chunks_per_second = completed / elapsed_time
            if chunks_per_second >= 1:
                speed_str = f"{chunks_per_second:.1f} chunks/s"
            else:
                speed_str = f"{60/chunks_per_second:.1f}s/chunk"
        else:
            speed_str = "ƒêang t√≠nh..."
        
        # C·∫≠p nh·∫≠t UI
        self.progress_details_var.set(f"{completed}/{total} chunks ({percentage:.1f}%) ‚Ä¢ ETA: {eta_str}")
        self.speed_var.set(f"T·ªëc ƒë·ªô: {speed_str}")
        
        # Update status
        if completed == total:
            self.progress_var.set("Ho√†n th√†nh!")
        else:
            self.progress_var.set(f"ƒêang d·ªãch... {percentage:.1f}%")
        
        self.root.update_idletasks()
    
    def start_translation(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªãch"""
        if not TRANSLATE_AVAILABLE:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ import module d·ªãch. Vui l√≤ng ki·ªÉm tra l·∫°i file translate.py")
            return
        
        # Validate EPUB conversion if enabled
        if self.auto_convert_epub_var.get():
            if not EPUB_AVAILABLE:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ import module ConvertEpub. Vui l√≤ng ki·ªÉm tra l·∫°i file ConvertEpub.py")
                return
            
            if not self.book_title_var.get().strip():
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ s√°ch cho EPUB")
                return
            
        # Validate inputs
        if not self.api_key_var.get().strip():
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p API Key")
            return
            
        if not self.input_file_var.get().strip():
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn file input")
            return
            
        if not os.path.exists(self.input_file_var.get()):
            messagebox.showerror("L·ªói", "File input kh√¥ng t·ªìn t·∫°i")
            return
        
        # Prepare output file
        output_file = self.output_file_var.get().strip()
        if not output_file:
            output_file = generate_output_filename(self.input_file_var.get())
            self.output_file_var.set(output_file)
        
        # Start translation in separate thread
        self.is_translating = True
        self.translate_btn.config(state=tk.DISABLED)
        self.stop_btn.config(state=tk.NORMAL)
        
        # Kh·ªüi t·∫°o progress tracking
        self.total_chunks = 0
        self.completed_chunks = 0
        self.start_time = time.time()
        self.last_update_time = self.start_time
        
        # Reset progress UI
        self.progress_bar['value'] = 0
        self.progress_var.set("ƒêang kh·ªüi t·∫°o...")
        self.progress_details_var.set("")
        self.speed_var.set("")
        
        self.translation_thread = threading.Thread(
            target=self.run_translation,
            args=(
                self.input_file_var.get(),
                output_file,
                self.api_key_var.get(),
                self.model_var.get()
            ),
            daemon=True
        )
        self.translation_thread.start()
    
    def run_translation(self, input_file, output_file, api_key, model_name):
        """Ch·∫°y qu√° tr√¨nh d·ªãch"""
        try:
            self.log("üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªãch...")
            self.log(f"üìÅ Input: {os.path.basename(input_file)}")
            self.log(f"üìÅ Output: {os.path.basename(output_file)}")
            self.log(f"ü§ñ Model: {model_name}")
            
            self.progress_var.set("ƒêang d·ªãch... Vui l√≤ng ch·ªù.")
            
            # Use wrapper function with basic progress
            self.log("üîß G·ªçi translate wrapper...")
            success = self.translate_with_basic_progress(input_file, output_file, api_key, model_name)
            self.log(f"üîß translate wrapper tr·∫£ v·ªÅ: {success}")
            
            if success and self.is_translating:
                self.log("‚úÖ D·ªãch ho√†n th√†nh!")
                
                # Auto reformat if enabled
                if self.auto_reformat_var.get():
                    self.log("üîß ƒêang reformat file...")
                    try:
                        fix_text_format(output_file)
                        self.log("‚úÖ Reformat ho√†n th√†nh!")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è L·ªói reformat: {e}")
                
                # Auto convert to EPUB if enabled
                if self.auto_convert_epub_var.get() and self.is_translating:
                    self.log("üìö ƒêang convert sang EPUB...")
                    self.progress_var.set("ƒêang convert EPUB...")
                    
                    try:
                        epub_success = self.convert_to_epub(output_file)
                        if epub_success:
                            self.log("‚úÖ Convert EPUB ho√†n th√†nh!")
                        else:
                            self.log("‚ö†Ô∏è Convert EPUB th·∫•t b·∫°i!")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è L·ªói convert EPUB: {e}")
                
                self.progress_var.set("Ho√†n th√†nh!")
                
                result_message = f"D·ªãch ho√†n th√†nh!\nFile ƒë√£ l∆∞u: {output_file}"
                if self.auto_convert_epub_var.get():
                    epub_file = os.path.splitext(output_file)[0] + ".epub"
                    if os.path.exists(epub_file):
                        result_message += f"\nEPUB ƒë√£ l∆∞u: {epub_file}"
                
                messagebox.showinfo("Th√†nh c√¥ng", result_message)
            
        except Exception as e:
            self.log(f"‚ùå L·ªói: {e}")
            import traceback
            self.log(f"‚ùå Traceback: {traceback.format_exc()}")
            messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói: {e}")
        finally:
            self.translation_finished()
    
    def translate_with_basic_progress(self, input_file, output_file, api_key, model_name):
        """Wrapper function v·ªõi basic progress tracking"""
        try:
            self.log("üìä ƒê·ªçc file ƒë·ªÉ t√≠nh progress...")
            
            # ƒê·ªçc file ƒë·ªÉ t√≠nh total chunks
            with open(input_file, 'r', encoding='utf-8', errors='replace') as infile:
                all_lines = infile.readlines()
            
            total_lines = len(all_lines)
            self.total_chunks = (total_lines + CHUNK_SIZE_LINES - 1) // CHUNK_SIZE_LINES
            self.completed_chunks = get_progress(f"{input_file}{PROGRESS_FILE_SUFFIX}")
            
            self.log(f"üìä T·ªïng {total_lines} d√≤ng, {self.total_chunks} chunks")
            self.log(f"üìà ƒê√£ ho√†n th√†nh {self.completed_chunks} chunks tr∆∞·ªõc ƒë√≥")
            
            # Set initial progress
            self.start_time = time.time()
            self.update_progress(self.completed_chunks, self.total_chunks)
            
            # Call original function
            success = translate_file_optimized(
                input_file=input_file,
                output_file=output_file,
                api_key=api_key,
                model_name=model_name
            )
            
            # Set final progress
            if success:
                self.update_progress(self.total_chunks, self.total_chunks)
            
            return success
            
        except Exception as e:
            self.log(f"‚ùå L·ªói trong wrapper: {e}")
            return False
    
    def translate_with_progress_OLD(self, input_file, output_file, api_key, model_name):
        """Custom translate function v·ªõi progress tracking"""
        import concurrent.futures
        from translate import CAN_REFORMAT
        
        self.log("üîß Kh·ªüi t·∫°o translate_with_progress...")
        self.log(f"‚öôÔ∏è Threads: {NUM_WORKERS}, Chunk size: {CHUNK_SIZE_LINES} d√≤ng")
        
        progress_file_path = f"{input_file}{PROGRESS_FILE_SUFFIX}"
        
        try:
            # ƒê·ªçc file v√† t√≠nh total chunks
            with open(input_file, 'r', encoding='utf-8', errors='replace') as infile:
                all_lines = infile.readlines()
            
            total_lines = len(all_lines)
            self.total_chunks = (total_lines + CHUNK_SIZE_LINES - 1) // CHUNK_SIZE_LINES  # Ceiling division
            self.completed_chunks = get_progress(progress_file_path)
            
            self.log(f"üìä T·ªïng {total_lines} d√≤ng, {self.total_chunks} chunks")
            self.log(f"üìà ƒê√£ ho√†n th√†nh {self.completed_chunks} chunks tr∆∞·ªõc ƒë√≥")
            
            # C·∫≠p nh·∫≠t initial progress
            self.update_progress(self.completed_chunks, self.total_chunks)
            
            # Ki·ªÉm tra n·∫øu ƒë√£ ho√†n th√†nh
            if self.completed_chunks >= self.total_chunks:
                self.log("‚úÖ File ƒë√£ ƒë∆∞·ª£c d·ªãch ho√†n to√†n")
                if os.path.exists(progress_file_path):
                    os.remove(progress_file_path)
                return True
            
            # Chia th√†nh chunks
            chunks = []
            for i in range(0, total_lines, CHUNK_SIZE_LINES):
                chunk_lines = all_lines[i:i + CHUNK_SIZE_LINES]
                chunks.append((len(chunks), chunk_lines, i))
            
            # System instruction
            system_instruction = "D·ªãch vƒÉn b·∫£n sau sang ti·∫øng Vi·ªát. B·ªëi c·∫£nh hi·ªán ƒë·∫°i. ƒê·∫£m b·∫£o c√°c c√¢u tho·∫°i nh√¢n v·∫≠t ƒë∆∞·ª£c d·ªãch ch√≠nh x√°c v√† ƒë·∫∑c trong d·∫•u "". ƒê·∫£m b·∫£o gi·ªØ nguy√™n chi ti·∫øt n·ªôi dung. Gi·ªØ nguy√™n c√°c t·ª´ ng·ªØ th√¥ t·ª•c, t√¨nh d·ª•c."
            
            # M·ªü file output
            mode = 'a' if self.completed_chunks > 0 else 'w'
            with open(output_file, mode, encoding='utf-8') as outfile:
                
                translated_chunks_results = {}
                next_expected_chunk_to_write = self.completed_chunks
                
                with concurrent.futures.ThreadPoolExecutor(max_workers=NUM_WORKERS) as executor:
                    
                    futures = {}
                    chunks_to_process = chunks[self.completed_chunks:]
                    
                    self.log(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {len(chunks_to_process)} chunks...")
                    
                    # G·ª≠i chunks ƒë·∫øn thread pool
                    for chunk_data in chunks_to_process:
                        if not self.is_translating:  # Ki·ªÉm tra stop
                            break
                        future = executor.submit(process_chunk, api_key, model_name, system_instruction, chunk_data)
                        futures[future] = chunk_data[0]
                    
                    # Thu th·∫≠p k·∫øt qu·∫£
                    for future in concurrent.futures.as_completed(futures):
                        if not self.is_translating:  # Ki·ªÉm tra stop
                            break
                            
                        chunk_index = futures[future]
                        try:
                            result = future.result()
                            processed_chunk_index, translated_text, lines_count = result
                            
                            # L∆∞u k·∫øt qu·∫£
                            translated_chunks_results[processed_chunk_index] = (translated_text, lines_count)
                            
                            # Ghi c√°c chunks theo th·ª© t·ª±
                            while next_expected_chunk_to_write in translated_chunks_results:
                                chunk_text, chunk_lines_count = translated_chunks_results.pop(next_expected_chunk_to_write)
                                outfile.write(chunk_text)
                                if not chunk_text.endswith('\n'):
                                    outfile.write('\n')
                                outfile.flush()
                                
                                # C·∫≠p nh·∫≠t progress
                                next_expected_chunk_to_write += 1
                                self.completed_chunks = next_expected_chunk_to_write
                                save_progress(progress_file_path, next_expected_chunk_to_write)
                                
                                # C·∫≠p nh·∫≠t UI progress
                                self.update_progress(self.completed_chunks, self.total_chunks)
                                
                                self.log(f"‚úÖ Chunk {next_expected_chunk_to_write}/{self.total_chunks}")
                                
                        except Exception as e:
                            self.log(f"‚ùå L·ªói chunk {chunk_index}: {e}")
                    
                    # Ghi chunks c√≤n s√≥t l·∫°i
                    if translated_chunks_results and self.is_translating:
                        sorted_remaining_chunks = sorted(translated_chunks_results.items())
                        for chunk_idx, (chunk_text, chunk_lines_count) in sorted_remaining_chunks:
                            try:
                                outfile.write(chunk_text)
                                if not chunk_text.endswith('\n'):
                                    outfile.write('\n')
                                outfile.flush()
                                next_expected_chunk_to_write += 1
                                self.completed_chunks = next_expected_chunk_to_write
                                save_progress(progress_file_path, next_expected_chunk_to_write)
                                self.update_progress(self.completed_chunks, self.total_chunks)
                            except Exception as e:
                                self.log(f"‚ùå L·ªói ghi chunk {chunk_idx}: {e}")
            
            # Ki·ªÉm tra ho√†n th√†nh
            if self.completed_chunks >= self.total_chunks and self.is_translating:
                self.log("‚úÖ D·ªãch ho√†n th√†nh!")
                if os.path.exists(progress_file_path):
                    os.remove(progress_file_path)
                return True
            else:
                self.log("‚ö†Ô∏è D·ªãch b·ªã gi√°n ƒëo·∫°n")
                return False
                
        except FileNotFoundError as e:
            self.log(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {input_file}")
            self.log(f"‚ùå Chi ti·∫øt l·ªói: {e}")
            return False
        except Exception as e:
            self.log(f"‚ùå L·ªói: {e}")
            self.log(f"‚ùå Lo·∫°i l·ªói: {type(e).__name__}")
            import traceback
            self.log(f"‚ùå Traceback: {traceback.format_exc()}")
            return False
    
    def convert_to_epub(self, txt_file):
        """Convert file txt th√†nh epub"""
        try:
            # T·∫°o ƒë∆∞·ªùng d·∫´n file
            base_name = os.path.splitext(txt_file)[0]
            docx_file = base_name + ".docx"
            epub_file = base_name + ".epub"
            
            # L·∫•y th√¥ng tin s√°ch
            book_title = self.book_title_var.get().strip()
            book_author = self.book_author_var.get().strip()
            chapter_pattern = self.chapter_pattern_var.get().strip()
            
            self.log(f"üìñ Ti√™u ƒë·ªÅ: {book_title}")
            self.log(f"‚úçÔ∏è T√°c gi·∫£: {book_author}")
            self.log(f"üîç Pattern ch∆∞∆°ng: {chapter_pattern}")
            
            # B∆∞·ªõc 1: TXT -> DOCX
            self.log("üìÑ ƒêang convert TXT sang DOCX...")
            docx_success = txt_to_docx(txt_file, docx_file, book_title, chapter_pattern)
            
            if not docx_success:
                self.log("‚ùå L·ªói convert TXT sang DOCX")
                return False
            
            self.log("‚úÖ Convert TXT sang DOCX th√†nh c√¥ng!")
            
            # B∆∞·ªõc 2: DOCX -> EPUB
            self.log("üìö ƒêang convert DOCX sang EPUB...")
            epub_success = docx_to_epub(docx_file, epub_file, book_title, book_author)
            
            if epub_success:
                self.log(f"‚úÖ EPUB ƒë√£ ƒë∆∞·ª£c t·∫°o: {os.path.basename(epub_file)}")
                # X√≥a file DOCX t·∫°m
                try:
                    os.remove(docx_file)
                    self.log("üóëÔ∏è ƒê√£ x√≥a file DOCX t·∫°m")
                except:
                    pass
                return True
            else:
                self.log("‚ùå L·ªói convert DOCX sang EPUB")
                return False
                
        except Exception as e:
            self.log(f"‚ùå L·ªói convert EPUB: {e}")
            return False
    
    def stop_translation(self):
        """D·ª´ng qu√° tr√¨nh d·ªãch"""
        self.is_translating = False
        self.log("‚èπÔ∏è ƒêang d·ª´ng qu√° tr√¨nh d·ªãch...")
        self.progress_var.set("ƒêang d·ª´ng...")
        
    def translation_finished(self):
        """Cleanup sau khi d·ªãch xong"""
        self.is_translating = False
        self.translate_btn.config(state=tk.NORMAL)
        self.stop_btn.config(state=tk.DISABLED)
        
        if not self.progress_var.get().startswith("Ho√†n th√†nh"):
            self.progress_var.set("S·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu...")
            self.progress_bar['value'] = 0
            self.progress_details_var.set("")
            self.speed_var.set("")
    
    def auto_save_settings(self):
        """T·ª± ƒë·ªông l∆∞u c√†i ƒë·∫∑t im l·∫∑ng (kh√¥ng hi·ªán th√¥ng b√°o)"""
        settings = {
            "api_key": self.api_key_var.get(),
            "model": self.model_var.get(),
            "auto_reformat": self.auto_reformat_var.get(),
            "auto_convert_epub": self.auto_convert_epub_var.get(),
            "book_author": self.book_author_var.get(),
            "chapter_pattern": self.chapter_pattern_var.get(),
            "last_input_dir": os.path.dirname(self.input_file_var.get()) if self.input_file_var.get() else "",
            "last_output_dir": os.path.dirname(self.output_file_var.get()) if self.output_file_var.get() else ""
        }
        
        try:
            with open("settings.json", "w", encoding="utf-8") as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
        except Exception as e:
            pass  # Im l·∫∑ng, kh√¥ng log l·ªói
    
    def save_settings(self):
        """L∆∞u c√†i ƒë·∫∑t v·ªõi th√¥ng b√°o"""
        self.auto_save_settings()
        try:
            self.log("üíæ ƒê√£ l∆∞u c√†i ƒë·∫∑t")
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ l∆∞u c√†i ƒë·∫∑t!")
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói l∆∞u c√†i ƒë·∫∑t: {e}")
    
    def load_settings(self):
        """Load c√†i ƒë·∫∑t ƒë√£ l∆∞u"""
        try:
            if os.path.exists("settings.json"):
                with open("settings.json", "r", encoding="utf-8") as f:
                    settings = json.load(f)
                
                # Load API key v√† hi·ªÉn th·ªã th√¥ng b√°o
                api_key = settings.get("api_key", "")
                if api_key:
                    self.api_key_var.set(api_key)
                    print(f"‚úÖ ƒê√£ load API key t·ª´ settings: {api_key[:10]}***{api_key[-4:]}")
                
                self.model_var.set(settings.get("model", "gemini-2.0-flash"))
                self.auto_reformat_var.set(settings.get("auto_reformat", True))
                self.auto_convert_epub_var.set(settings.get("auto_convert_epub", False))
                self.book_author_var.set(settings.get("book_author", "Unknown Author"))
                self.chapter_pattern_var.set(settings.get("chapter_pattern", r"^Ch∆∞∆°ng\s+\d+:\s+.*$"))
                
                # Update EPUB settings visibility
                self.toggle_epub_options()
                
            else:
                print("‚ÑπÔ∏è Ch∆∞a c√≥ file settings.json. API key s·∫Ω ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông khi nh·∫≠p.")
                
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói load c√†i ƒë·∫∑t: {e}")

def main():
    """Main function"""
    # Create the main window
    root = tk.Tk()
    
    # Set icon (optional)
    try:
        root.iconbitmap("icon.ico")  # N·∫øu c√≥ file icon
    except:
        pass
    
    # Create and run app
    app = TranslateApp(root)
    
    # Handle window close
    def on_closing():
        if app.is_translating:
            if messagebox.askokcancel("Tho√°t", "ƒêang c√≥ qu√° tr√¨nh d·ªãch. B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t?"):
                app.stop_translation()
                root.destroy()
        else:
            root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    
    # Start the GUI
    root.mainloop()

if __name__ == "__main__":
    main() 