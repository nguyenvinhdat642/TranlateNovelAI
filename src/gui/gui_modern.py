import customtkinter as ctk
from tkinter import filedialog
import threading
import os
import sys
import time
from datetime import datetime
import json
import re

# Add the parent directory to the path to make absolute imports work
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

try:
    from .custom_dialogs import show_success, show_error, show_warning, show_question, show_toast_success, show_toast_error
except ImportError:
    try:
        from custom_dialogs import show_success, show_error, show_warning, show_question, show_toast_success, show_toast_error
    except ImportError:
        # Fallback to standard messagebox if custom dialogs not available
        from tkinter import messagebox
        def show_success(msg, details=None, parent=None):
            return messagebox.showinfo("Th√†nh c√¥ng", msg)
        def show_error(msg, details=None, parent=None):
            return messagebox.showerror("L·ªói", msg)
        def show_warning(msg, details=None, parent=None):
            return messagebox.showwarning("C·∫£nh b√°o", msg)
        def show_question(msg, details=None, parent=None):
            return messagebox.askyesno("X√°c nh·∫≠n", msg)
        def show_toast_success(msg, duration=3000):
            return messagebox.showinfo("Th√†nh c√¥ng", msg)
        def show_toast_error(msg, duration=3000):
            return messagebox.showerror("L·ªói", msg)

try:
    from PIL import Image, ImageTk
except ImportError:
    Image = None
    ImageTk = None

# Set appearance mode and color theme
ctk.set_appearance_mode("dark")  # Modes: "System" (standard), "Dark", "Light"
ctk.set_default_color_theme("blue")  # Themes: "blue" (standard), "green", "dark-blue"

# Import translate functions
TRANSLATE_AVAILABLE = False
EPUB_AVAILABLE = False

# Try relative imports first (when run as module)
try:
    from ..core.translate import translate_file_optimized, generate_output_filename, set_stop_translation, clear_stop_translation, is_translation_stopped, is_quota_exceeded
    from ..core.reformat import fix_text_format
    from ..core.ConvertEpub import txt_to_docx, docx_to_epub
    TRANSLATE_AVAILABLE = True
    EPUB_AVAILABLE = True
except ImportError:
    # Try absolute imports (when run directly)
    try:
        from core.translate import translate_file_optimized, generate_output_filename, set_stop_translation, clear_stop_translation, is_translation_stopped, is_quota_exceeded
        from core.reformat import fix_text_format
        from core.ConvertEpub import txt_to_docx, docx_to_epub
        TRANSLATE_AVAILABLE = True
        EPUB_AVAILABLE = True
    except ImportError as e:
        print(f"‚ö†Ô∏è L·ªói import: {e}")
        print("‚ö†Ô∏è M·ªôt s·ªë ch·ª©c nƒÉng c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông")
        
        # Define fallback functions
        def translate_file_optimized(*args, **kwargs):
            print("‚ùå Ch·ª©c nƒÉng d·ªãch kh√¥ng kh·∫£ d·ª•ng")
            return False
            
        def generate_output_filename(input_file):
            """Generate output filename as fallback"""
            base_name = os.path.splitext(input_file)[0]
            return f"{base_name}_translated.txt"
        
        def set_stop_translation():
            print("‚ùå Ch·ª©c nƒÉng d·ª´ng d·ªãch kh√¥ng kh·∫£ d·ª•ng")
            
        def clear_stop_translation():
            print("‚ùå Ch·ª©c nƒÉng d·ª´ng d·ªãch kh√¥ng kh·∫£ d·ª•ng")
            
        def is_translation_stopped():
            return False
            
        def is_quota_exceeded():
            return False
            
        def fix_text_format(*args, **kwargs):
            print("‚ùå Ch·ª©c nƒÉng reformat kh√¥ng kh·∫£ d·ª•ng")
            return False
            
        def txt_to_docx(*args, **kwargs):
            print("‚ùå Ch·ª©c nƒÉng convert DOCX kh√¥ng kh·∫£ d·ª•ng")
            return False
            
        def docx_to_epub(*args, **kwargs):
            print("‚ùå Ch·ª©c nƒÉng convert EPUB kh√¥ng kh·∫£ d·ª•ng")
            return False

class LogCapture:
    """Class ƒë·ªÉ capture print statements v√† chuy·ªÉn v·ªÅ GUI"""
    def __init__(self, gui_log_function):
        self.gui_log = gui_log_function
        self.terminal = sys.stdout
        
    def write(self, message):
        if self.terminal is not None:
            try:
                self.terminal.write(message)
                self.terminal.flush()
            except:
                pass
        
        if message.strip() and self.gui_log is not None:
            try:
                self.gui_log(message.strip())
            except:
                pass
    
    def flush(self):
        if self.terminal is not None:
            try:
                self.terminal.flush()
            except:
                pass

class ModernTranslateNovelAI(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        # Configure window
        self.title("ü§ñ TranslateNovelAI - Modern Edition")
        self.geometry("1100x650")
        self.minsize(1000, 600)
        
        # Variables
        self.input_file_var = ctk.StringVar()
        self.output_file_var = ctk.StringVar()
        self.api_key_var = ctk.StringVar()
        self.model_var = ctk.StringVar(value="gemini-2.0-flash")
        self.context_var = ctk.StringVar(value="B·ªëi c·∫£nh hi·ªán ƒë·∫°i")
        self.auto_reformat_var = ctk.BooleanVar(value=True)
        self.auto_convert_epub_var = ctk.BooleanVar(value=False)
        self.book_title_var = ctk.StringVar()
        self.book_author_var = ctk.StringVar(value="Unknown Author")
        self.chapter_pattern_var = ctk.StringVar(value="Ch∆∞∆°ng XX:")
        self.custom_chapter_pattern_var = ctk.StringVar(value=r"^Ch∆∞∆°ng\s+\d+:\s+.*$")
        self.threads_var = ctk.StringVar()
        self.chunk_size_var = ctk.StringVar(value="100")
        
        # Auto-detect optimal threads on startup
        self.auto_detect_threads(silent=True)
        
        # Translation state
        self.is_translating = False
        self.translation_thread = None
        self.total_chunks = 0
        self.completed_chunks = 0
        self.start_time = 0
        
        # Log capture
        self.original_stdout = sys.stdout
        self.log_capture = None
        
        # Setup GUI
        self.setup_gui()
        
        # Load settings
        self.load_settings()
        
        # Update appearance buttons after loading
        self.after(100, self.update_appearance_buttons)
        
    def setup_gui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ch√≠nh"""
        # Configure grid layout (3x1)
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
        # Create sidebar frame
        self.setup_sidebar()
        
        # Create main content frame
        self.setup_main_content()
        
        # Create right panel (logs)
        self.setup_right_panel()
        
    def setup_sidebar(self):
        """Thi·∫øt l·∫≠p sidebar b√™n tr√°i"""
        self.sidebar_frame = ctk.CTkFrame(self, width=280, corner_radius=0)
        self.sidebar_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 10))
        self.sidebar_frame.grid_columnconfigure(0, weight=1)
        
        # App title
        self.logo_label = ctk.CTkLabel(
            self.sidebar_frame,
            text="ü§ñ TranslateNovelAI",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        self.logo_label.grid(row=0, column=0, padx=20, pady=(20, 10), sticky="ew")
        
        self.version_label = ctk.CTkLabel(
            self.sidebar_frame,
            text="Modern Edition v2.0",
            font=ctk.CTkFont(size=12)
        )
        self.version_label.grid(row=1, column=0, padx=20, pady=(0, 20), sticky="ew")
        
        # API Configuration
        self.api_label = ctk.CTkLabel(
            self.sidebar_frame,
            text="üîë API Configuration",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.api_label.grid(row=2, column=0, padx=20, pady=(10, 5), sticky="ew")
        
        self.api_key_entry = ctk.CTkEntry(
            self.sidebar_frame,
            placeholder_text="Google AI API Key",
            textvariable=self.api_key_var,
            show="*",
            width=240
        )
        self.api_key_entry.grid(row=3, column=0, padx=20, pady=5, sticky="ew")
        
        self.model_combo = ctk.CTkComboBox(
            self.sidebar_frame,
            values=["gemini-2.0-flash", "gemini-1.5-flash", "gemini-1.5-pro"],
            variable=self.model_var,
            width=240
        )
        self.model_combo.grid(row=4, column=0, padx=20, pady=5, sticky="ew")
        
        self.context_combo = ctk.CTkComboBox(
            self.sidebar_frame,
            values=[
                "B·ªëi c·∫£nh hi·ªán ƒë·∫°i",
                "B·ªëi c·∫£nh c·ªï ƒë·∫°i", 
                "B·ªëi c·∫£nh fantasy/vi·ªÖn t∆∞·ªüng",
                "B·ªëi c·∫£nh h·ªçc ƒë∆∞·ªùng",
                "B·ªëi c·∫£nh c√¥ng s·ªü",
                "B·ªëi c·∫£nh l√£ng m·∫°n",
                "B·ªëi c·∫£nh h√†nh ƒë·ªông",
                "T√πy ch·ªânh"
            ],
            variable=self.context_var,
            command=self.on_context_changed,
            width=240
        )
        self.context_combo.grid(row=5, column=0, padx=20, pady=5, sticky="ew")
        
        # Performance Settings
        self.performance_label = ctk.CTkLabel(
            self.sidebar_frame,
            text="‚ö° Performance",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.performance_label.grid(row=6, column=0, padx=20, pady=(20, 5), sticky="ew")
        
        # Threads setting
        self.threads_frame = ctk.CTkFrame(self.sidebar_frame, fg_color="transparent")
        self.threads_frame.grid(row=7, column=0, padx=20, pady=5, sticky="ew")
        self.threads_frame.grid_columnconfigure(1, weight=1)
        
        self.threads_label = ctk.CTkLabel(
            self.threads_frame,
            text="Threads:",
            font=ctk.CTkFont(size=12)
        )
        self.threads_label.grid(row=0, column=0, sticky="w")
        
        self.threads_entry = ctk.CTkEntry(
            self.threads_frame,
            textvariable=self.threads_var,
            width=60,
            height=28
        )
        self.threads_entry.grid(row=0, column=1, padx=(5, 0), sticky="e")
        
        # Chunk size setting
        self.chunk_frame = ctk.CTkFrame(self.sidebar_frame, fg_color="transparent")
        self.chunk_frame.grid(row=8, column=0, padx=20, pady=5, sticky="ew")
        self.chunk_frame.grid_columnconfigure(1, weight=1)
        
        self.chunk_label = ctk.CTkLabel(
            self.chunk_frame,
            text="Chunk Size:",
            font=ctk.CTkFont(size=12)
        )
        self.chunk_label.grid(row=0, column=0, sticky="w")
        
        self.chunk_entry = ctk.CTkEntry(
            self.chunk_frame,
            textvariable=self.chunk_size_var,
            width=60,
            height=28
        )
        self.chunk_entry.grid(row=0, column=1, padx=(5, 0), sticky="e")
        
        # General Settings
        self.settings_label = ctk.CTkLabel(
            self.sidebar_frame,
            text="‚öôÔ∏è Settings",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.settings_label.grid(row=9, column=0, padx=20, pady=(20, 5), sticky="ew")
        
        self.auto_reformat_check = ctk.CTkCheckBox(
            self.sidebar_frame,
            text="Auto reformat",
            variable=self.auto_reformat_var
        )
        self.auto_reformat_check.grid(row=10, column=0, padx=20, pady=5, sticky="w")
        
        self.auto_epub_check = ctk.CTkCheckBox(
            self.sidebar_frame,
            text="Auto convert EPUB",
            variable=self.auto_convert_epub_var,
            command=self.on_epub_setting_changed
        )
        self.auto_epub_check.grid(row=11, column=0, padx=20, pady=5, sticky="w")
        
        # Control buttons - Grid 1x2 Layout
        self.control_grid_frame = ctk.CTkFrame(self.sidebar_frame, fg_color="transparent")
        self.control_grid_frame.grid(row=12, column=0, padx=20, pady=10, sticky="ew")
        
        # Configure grid columns v·ªõi weight ƒë·ªÅu nhau
        for i in range(2):
            self.control_grid_frame.grid_columnconfigure(i, weight=1, uniform="buttons")
        
        # Row 1: Main controls
        self.translate_btn = ctk.CTkButton(
            self.control_grid_frame,
            text="üöÄ B·∫Øt ƒê·∫ßu D·ªãch",
            command=self.toggle_translation,
            height=40,
            font=ctk.CTkFont(size=12, weight="bold")
        )
        self.translate_btn.grid(row=0, column=0, padx=(0, 5), pady=(0, 5), sticky="ew")
        
        self.save_settings_btn = ctk.CTkButton(
            self.control_grid_frame,
            text="üíæ L∆∞u C√†i ƒê·∫∑t",
            command=self.save_settings,
            height=40
        )
        self.save_settings_btn.grid(row=0, column=1, padx=(5, 0), pady=(0, 5), sticky="ew")
        
        # Row 2: Appearance toggle
        # Appearance toggle frame
        self.appearance_frame = ctk.CTkFrame(self.control_grid_frame, fg_color="transparent")
        self.appearance_frame.grid(row=1, column=0, columnspan=2, padx=0, pady=(5, 0), sticky="ew")
        self.appearance_frame.grid_columnconfigure(0, weight=1)
        self.appearance_frame.grid_columnconfigure(1, weight=1)
        
        # Light/Dark toggle buttons
        self.light_mode_btn = ctk.CTkButton(
            self.appearance_frame,
            text="‚òÄÔ∏è Light Mode",
            command=self.set_light_mode,
            height=40,
            font=ctk.CTkFont(size=12)
        )
        self.light_mode_btn.grid(row=0, column=0, padx=(0, 2), sticky="ew")
        
        self.dark_mode_btn = ctk.CTkButton(
            self.appearance_frame,
            text="üåô Dark Mode",
            command=self.set_dark_mode,
            height=40,
            font=ctk.CTkFont(size=12)
        )
        self.dark_mode_btn.grid(row=0, column=1, padx=(2, 0), sticky="ew")
        
        # Initialize appearance button colors
        self.update_appearance_buttons()
        
    def setup_main_content(self):
        """Thi·∫øt l·∫≠p n·ªôi dung ch√≠nh"""
        self.main_frame = ctk.CTkScrollableFrame(self)
        self.main_frame.grid(row=0, column=1, sticky="nsew", padx=10)
        self.main_frame.grid_columnconfigure(0, weight=1)
        
        # Title
        self.main_title = ctk.CTkLabel(
            self.main_frame,
            text="üìÅ File Management & Processing",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        self.main_title.grid(row=0, column=0, padx=20, pady=20)
        
        # File selection frame
        self.file_frame = ctk.CTkFrame(self.main_frame)
        self.file_frame.grid(row=1, column=0, sticky="ew", padx=20, pady=10)
        self.file_frame.grid_columnconfigure(1, weight=1)
        
        # Input file
        self.input_label = ctk.CTkLabel(
            self.file_frame,
            text="Input File:",
            font=ctk.CTkFont(weight="bold")
        )
        self.input_label.grid(row=0, column=0, padx=20, pady=(20, 5), sticky="w")
        
        self.input_entry = ctk.CTkEntry(
            self.file_frame,
            textvariable=self.input_file_var,
            placeholder_text="Ch·ªçn file truy·ªán c·∫ßn d·ªãch..."
        )
        self.input_entry.grid(row=1, column=0, columnspan=2, padx=20, pady=5, sticky="ew")
        
        self.input_btn = ctk.CTkButton(
            self.file_frame,
            text="üìÅ Browse",
            command=self.browse_input_file,
            width=100
        )
        self.input_btn.grid(row=2, column=0, padx=20, pady=5, sticky="w")
        
        # Output file
        self.output_label = ctk.CTkLabel(
            self.file_frame,
            text="Output File:",
            font=ctk.CTkFont(weight="bold")
        )
        self.output_label.grid(row=3, column=0, padx=20, pady=(15, 5), sticky="w")
        
        self.output_entry = ctk.CTkEntry(
            self.file_frame,
            textvariable=self.output_file_var,
            placeholder_text="File output s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông t·∫°o..."
        )
        self.output_entry.grid(row=4, column=0, columnspan=2, padx=20, pady=5, sticky="ew")
        
        self.output_btn_frame = ctk.CTkFrame(self.file_frame, fg_color="transparent")
        self.output_btn_frame.grid(row=5, column=0, columnspan=2, padx=20, pady=(5, 20), sticky="w")
        
        self.output_btn = ctk.CTkButton(
            self.output_btn_frame,
            text="üìÅ Browse",
            command=self.browse_output_file,
            width=100
        )
        self.output_btn.grid(row=0, column=0, padx=(0, 10))
        
        self.reset_output_btn = ctk.CTkButton(
            self.output_btn_frame,
            text="üîÑ Reset",
            command=self.reset_output_filename,
            width=100
        )
        self.reset_output_btn.grid(row=0, column=1)
        
        # EPUB Settings (initially hidden)
        self.epub_frame = ctk.CTkFrame(self.main_frame)
        self.epub_frame.grid_columnconfigure(0, weight=1)
        
        self.epub_title_label = ctk.CTkLabel(
            self.epub_frame,
            text="üìö EPUB Settings",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.epub_title_label.grid(row=0, column=0, padx=20, pady=(20, 10))
        
        self.book_title_entry = ctk.CTkEntry(
            self.epub_frame,
            textvariable=self.book_title_var,
            placeholder_text="Ti√™u ƒë·ªÅ s√°ch"
        )
        self.book_title_entry.grid(row=1, column=0, padx=20, pady=5, sticky="ew")
        
        self.book_author_entry = ctk.CTkEntry(
            self.epub_frame,
            textvariable=self.book_author_var,
            placeholder_text="T√°c gi·∫£"
        )
        self.book_author_entry.grid(row=2, column=0, padx=20, pady=5, sticky="ew")
        
        # Chapter header pattern selection
        self.chapter_pattern_label = ctk.CTkLabel(
            self.epub_frame,
            text="ƒê·ªãnh d·∫°ng ti√™u ƒë·ªÅ ch∆∞∆°ng:",
            font=ctk.CTkFont(weight="bold")
        )
        self.chapter_pattern_label.grid(row=3, column=0, padx=20, pady=(10, 5), sticky="w")
        
        self.chapter_pattern_combo = ctk.CTkComboBox(
            self.epub_frame,
            values=[
                "Ch∆∞∆°ng XX:",
                "Ch∆∞∆°ng XX",
                "XXX",
                "XXX:",
                "Ph·∫ßn X:",
                "Ph·∫ßn X",
                "Chapter X:",
                "Chapter X",
                "Á¨¨XÁ´†",
                "Á¨¨XÁ´†:",
                "T√πy ch·ªânh"
            ],
            variable=self.chapter_pattern_var,
            command=self.on_chapter_pattern_changed,
            width=240
        )
        self.chapter_pattern_combo.grid(row=4, column=0, padx=20, pady=5, sticky="ew")
        
        # Custom pattern entry (hidden by default)
        self.custom_pattern_frame = ctk.CTkFrame(self.epub_frame, fg_color="transparent")
        self.custom_pattern_frame.grid_columnconfigure(0, weight=1)
        
        self.custom_pattern_label = ctk.CTkLabel(
            self.custom_pattern_frame,
            text="Regex pattern t√πy ch·ªânh:",
            font=ctk.CTkFont(size=12)
        )
        self.custom_pattern_label.grid(row=0, column=0, padx=20, pady=(5, 2), sticky="w")
        
        self.custom_pattern_entry = ctk.CTkEntry(
            self.custom_pattern_frame,
            textvariable=self.custom_chapter_pattern_var,
            placeholder_text="Nh·∫≠p regex pattern..."
        )
        self.custom_pattern_entry.grid(row=1, column=0, padx=20, pady=(2, 10), sticky="ew")

        # Progress frame
        self.progress_frame = ctk.CTkFrame(self.main_frame)
        self.progress_frame.grid(row=3, column=0, sticky="ew", padx=20, pady=10)
        self.progress_frame.grid_columnconfigure(0, weight=1)
        
        self.progress_label = ctk.CTkLabel(
            self.progress_frame,
            text="üìä Progress",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.progress_label.grid(row=0, column=0, padx=20, pady=(20, 5))
        
        self.progress_text = ctk.CTkLabel(
            self.progress_frame,
            text="S·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu...",
            font=ctk.CTkFont(size=12)
        )
        self.progress_text.grid(row=1, column=0, padx=20, pady=5)
        
        self.progress_bar = ctk.CTkProgressBar(self.progress_frame)
        self.progress_bar.grid(row=2, column=0, padx=20, pady=(5, 20), sticky="ew")
        self.progress_bar.set(0)
        
        # Custom prompt frame (hidden by default)
        self.custom_prompt_frame = ctk.CTkFrame(self.main_frame)
        self.custom_prompt_frame.grid_columnconfigure(0, weight=1)
        
        self.custom_prompt_label = ctk.CTkLabel(
            self.custom_prompt_frame,
            text="Custom Prompt:",
            font=ctk.CTkFont(weight="bold")
        )
        self.custom_prompt_label.grid(row=0, column=0, padx=20, pady=(20, 5), sticky="w")
        
        self.custom_prompt_textbox = ctk.CTkTextbox(
            self.custom_prompt_frame,
            height=100
        )
        self.custom_prompt_textbox.grid(row=1, column=0, padx=20, pady=(5, 20), sticky="ew")
        
    def setup_right_panel(self):
        """Thi·∫øt l·∫≠p panel logs b√™n ph·∫£i"""
        self.right_panel = ctk.CTkFrame(self, width=350)
        self.right_panel.grid(row=0, column=2, sticky="nsew", padx=(10, 0))
        self.right_panel.grid_rowconfigure(2, weight=1)
        self.right_panel.grid_columnconfigure(0, weight=1)
        
        # Logs title
        self.logs_title = ctk.CTkLabel(
            self.right_panel,
            text="üìù Logs & Information",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.logs_title.grid(row=0, column=0, padx=20, pady=(20, 10))
        
        # Log controls
        self.log_controls_frame = ctk.CTkFrame(self.right_panel, fg_color="transparent")
        self.log_controls_frame.grid(row=1, column=0, sticky="ew", padx=20, pady=5)
        
        self.clear_log_btn = ctk.CTkButton(
            self.log_controls_frame,
            text="üóëÔ∏è Clear",
            command=self.clear_logs,
            width=80,
            height=30
        )
        self.clear_log_btn.grid(row=0, column=0, padx=(0, 5))
        
        self.save_log_btn = ctk.CTkButton(
            self.log_controls_frame,
            text="üíæ Save",
            command=self.save_logs,
            width=80,
            height=30
        )
        self.save_log_btn.grid(row=0, column=1, padx=5)
        
        self.auto_scroll_var = ctk.BooleanVar(value=True)
        self.auto_scroll_check = ctk.CTkCheckBox(
            self.log_controls_frame,
            text="Auto-scroll",
            variable=self.auto_scroll_var
        )
        self.auto_scroll_check.grid(row=0, column=2, padx=(5, 0))
        
        # Log text area
        self.log_textbox = ctk.CTkTextbox(
            self.right_panel,
            font=ctk.CTkFont(family="Consolas", size=10)
        )
        self.log_textbox.grid(row=2, column=0, padx=20, pady=(5, 20), sticky="nsew")
        
    def on_context_changed(self, choice):
        """X·ª≠ l√Ω khi thay ƒë·ªïi b·ªëi c·∫£nh d·ªãch"""
        if choice == "T√πy ch·ªânh":
            self.custom_prompt_frame.grid(row=4, column=0, sticky="ew", padx=20, pady=10)
            # Load default custom prompt
            default_custom = "D·ªãch vƒÉn b·∫£n sau sang ti·∫øng Vi·ªát. ƒê·∫£m b·∫£o c√°c c√¢u tho·∫°i nh√¢n v·∫≠t ƒë∆∞·ª£c d·ªãch ch√≠nh x√°c v√† ƒë·∫∑t trong d·∫•u "". ƒê·∫£m b·∫£o gi·ªØ nguy√™n chi ti·∫øt n·ªôi dung."
            self.custom_prompt_textbox.delete("0.0", "end")
            self.custom_prompt_textbox.insert("0.0", default_custom)
        else:
            self.custom_prompt_frame.grid_remove()
    
    def get_system_instruction(self):
        """T·∫°o system instruction d·ª±a tr√™n b·ªëi c·∫£nh ƒë√£ ch·ªçn"""
        context = self.context_var.get()
        
        base_instruction = "D·ªãch vƒÉn b·∫£n sau sang ti·∫øng Vi·ªát. ƒê·∫£m b·∫£o c√°c c√¢u tho·∫°i nh√¢n v·∫≠t ƒë∆∞·ª£c d·ªãch ch√≠nh x√°c v√† ƒë·∫∑t trong d·∫•u "". ƒê·∫£m b·∫£o gi·ªØ nguy√™n chi ti·∫øt n·ªôi dung."
        
        context_instructions = {
            "B·ªëi c·∫£nh hi·ªán ƒë·∫°i": f"{base_instruction} B·ªëi c·∫£nh hi·ªán ƒë·∫°i. Gi·ªØ nguy√™n c√°c t·ª´ ng·ªØ th√¥ t·ª•c, t√¨nh d·ª•c.",
            "B·ªëi c·∫£nh c·ªï ƒë·∫°i": f"{base_instruction} B·ªëi c·∫£nh c·ªï ƒë·∫°i. S·ª≠ d·ª•ng ng√¥n ng·ªØ trang tr·ªçng, l·ªãch s·ª± ph√π h·ª£p th·ªùi k·ª≥ c·ªï ƒë·∫°i. D√πng danh x∆∞ng c·ªï ƒëi·ªÉn nh∆∞ 'ng∆∞∆°i', 'ta', 'h·∫° th·∫ßn'.",
            "B·ªëi c·∫£nh fantasy/vi·ªÖn t∆∞·ªüng": f"{base_instruction} B·ªëi c·∫£nh fantasy/vi·ªÖn t∆∞·ªüng. Gi·ªØ nguy√™n t√™n thu·∫≠t ng·ªØ ma thu·∫≠t, t√™n k·ªπ nƒÉng, t√™n v≈© kh√≠ ƒë·∫∑c bi·ªát. D·ªãch s√°t nghƒ©a c√°c thu·∫≠t ng·ªØ fantasy.",
            "B·ªëi c·∫£nh h·ªçc ƒë∆∞·ªùng": f"{base_instruction} B·ªëi c·∫£nh h·ªçc ƒë∆∞·ªùng. S·ª≠ d·ª•ng ng√¥n ng·ªØ tr·∫ª trung, nƒÉng ƒë·ªông. D·ªãch ch√≠nh x√°c c√°c danh x∆∞ng h·ªçc sinh, th·∫ßy c√¥.",
            "B·ªëi c·∫£nh c√¥ng s·ªü": f"{base_instruction} B·ªëi c·∫£nh c√¥ng s·ªü. S·ª≠ d·ª•ng ng√¥n ng·ªØ l·ªãch s·ª±, trang tr·ªçng ph√π h·ª£p m√¥i tr∆∞·ªùng l√†m vi·ªác. D·ªãch ch√≠nh x√°c ch·ª©c danh, thu·∫≠t ng·ªØ kinh doanh.",
            "B·ªëi c·∫£nh l√£ng m·∫°n": f"{base_instruction} B·ªëi c·∫£nh l√£ng m·∫°n. Ch√∫ tr·ªçng c·∫£m x√∫c, ng√¥n ng·ªØ ng·ªçt ng√†o, l√£ng m·∫°n. D·ªãch tinh t·∫ø c√°c c√¢u t·ªè t√¨nh, bi·ªÉu ƒë·∫°t t√¨nh c·∫£m.",
            "B·ªëi c·∫£nh h√†nh ƒë·ªông": f"{base_instruction} B·ªëi c·∫£nh h√†nh ƒë·ªông. Gi·ªØ nguy√™n t√™n k·ªπ nƒÉng, v≈© kh√≠, thu·∫≠t ng·ªØ chi·∫øn ƒë·∫•u. D·ªãch m·∫°nh m·∫Ω, nƒÉng ƒë·ªông c√°c c·∫£nh h√†nh ƒë·ªông.",
            "T√πy ch·ªânh": self.custom_prompt_textbox.get("0.0", "end").strip() if hasattr(self, 'custom_prompt_textbox') else base_instruction
        }
        
        return context_instructions.get(context, base_instruction)
    
    def browse_input_file(self):
        """Ch·ªçn file input"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file truy·ªán c·∫ßn d·ªãch",
            filetypes=[
                ("Text files", "*.txt"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            self.input_file_var.set(file_path)
            
            # Auto-generate output filename
            output_path = generate_output_filename(file_path)
            self.output_file_var.set(output_path)
            self.log(f"üìÅ T·ª± ƒë·ªông t·∫°o t√™n file output: {os.path.basename(output_path)}")
            
            # Auto-fill book title from filename
            if not self.book_title_var.get() or self.book_title_var.get() == "Unknown Title":
                filename = os.path.splitext(os.path.basename(file_path))[0]
                self.book_title_var.set(filename)
            
            # Check if there's existing progress
            progress_file = f"{file_path}.progress.json"
            if os.path.exists(progress_file):
                try:
                    with open(progress_file, 'r', encoding='utf-8') as f:
                        progress_data = json.load(f)
                        completed_chunks = progress_data.get('completed_chunks', 0)
                        if completed_chunks > 0:
                            self.log(f"üîÑ Ph√°t hi·ªán ti·∫øn ƒë·ªô c≈©: {completed_chunks} chunks ƒë√£ ho√†n th√†nh")
                            self.translate_btn.configure(
                                text="‚ñ∂Ô∏è Ti·∫øp T·ª•c D·ªãch",
                                fg_color=("blue", "darkblue"),
                                hover_color=("darkblue", "blue")
                            )
                            self.progress_text.configure(text=f"S·∫µn s√†ng ti·∫øp t·ª•c ({completed_chunks} chunks ƒë√£ xong)")
                except Exception as e:
                    self.log(f"‚ö†Ô∏è L·ªói ƒë·ªçc file ti·∫øn ƒë·ªô: {e}")
            else:
                self.translate_btn.configure(
                    text="üöÄ B·∫Øt ƒê·∫ßu D·ªãch",
                    fg_color=("blue", "darkblue"),
                    hover_color=("darkblue", "blue")
                )
                self.progress_text.configure(text="S·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu...")
    
    def browse_output_file(self):
        """Ch·ªçn file output"""
        initial_dir = ""
        if self.input_file_var.get():
            initial_dir = os.path.dirname(self.input_file_var.get())
            
        file_path = filedialog.asksaveasfilename(
            title="Ch·ªçn n∆°i l∆∞u file ƒë√£ d·ªãch",
            initialdir=initial_dir,
            defaultextension=".txt",
            filetypes=[
                ("Text files", "*.txt"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            self.output_file_var.set(file_path)
            self.log(f"üìÅ ƒê√£ ch·ªçn file output: {os.path.basename(file_path)}")
    
    def reset_output_filename(self):
        """Reset output filename to auto-generated name"""
        if not self.input_file_var.get():
            show_warning("Vui l√≤ng ch·ªçn file input tr∆∞·ªõc!", parent=self)
            return
            
        output_path = generate_output_filename(self.input_file_var.get())
        self.output_file_var.set(output_path)
        self.log(f"üîÑ ƒê√£ reset t√™n file output: {os.path.basename(output_path)}")
    
    def auto_detect_threads(self, silent=False):
        """T·ª± ƒë·ªông ph√°t hi·ªán s·ªë threads t·ªëi ∆∞u cho m√°y"""
        try:
            import multiprocessing
            cpu_cores = multiprocessing.cpu_count()
            
            # T√≠nh to√°n threads t·ªëi ∆∞u:
            # - I/O bound tasks n√™n d√πng nhi·ªÅu threads h∆°n s·ªë cores
            # - Nh∆∞ng kh√¥ng qu√° nhi·ªÅu ƒë·ªÉ tr√°nh rate limiting
            optimal_threads = min(max(cpu_cores * 2, 4), 20)
            
            self.threads_var.set(str(optimal_threads))
            
            if not silent:
                self.log(f"üñ•Ô∏è Ph√°t hi·ªán {cpu_cores} CPU cores")
                self.log(f"üîß ƒê√£ ƒë·∫∑t threads t·ªëi ∆∞u: {optimal_threads}")
                show_success(f"ƒê√£ ƒë·∫∑t threads t·ªëi ∆∞u: {optimal_threads}\n(D·ª±a tr√™n {cpu_cores} CPU cores)", parent=self)
            else:
                self.log(f"üîß T·ª± ƒë·ªông ƒë·∫∑t {optimal_threads} threads (CPU: {cpu_cores} cores)")
                
        except Exception as e:
            if not silent:
                self.log(f"‚ö†Ô∏è L·ªói khi ph√°t hi·ªán CPU: {e}")
                show_warning(f"Kh√¥ng th·ªÉ t·ª± ƒë·ªông ph√°t hi·ªán CPU.\nƒê·∫∑t v·ªÅ m·∫∑c ƒë·ªãnh: 10 threads", parent=self)
            self.threads_var.set("10")
    
    def setup_log_capture(self):
        """Thi·∫øt l·∫≠p log capture"""
        if not self.log_capture:
            self.log_capture = LogCapture(self.log_from_translate)
            sys.stdout = self.log_capture
    
    def restore_stdout(self):
        """Kh√¥i ph·ª•c stdout"""
        if self.log_capture:
            sys.stdout = self.original_stdout
            self.log_capture = None
    
    def log_from_translate(self, message):
        """Nh·∫≠n log t·ª´ translate.py v√† hi·ªÉn th·ªã l√™n GUI"""
        self.after(0, lambda: self._update_log_ui(message))
    
    def _update_log_ui(self, message):
        """Update log UI (thread-safe)"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_message = f"[{timestamp}] {message}"
            
            # Update log textbox
            if hasattr(self, 'log_textbox') and self.log_textbox is not None:
                self.log_textbox.insert("end", log_message + "\n")
            
            # Auto-scroll if enabled
            if hasattr(self, 'auto_scroll_var') and self.auto_scroll_var.get():
                if hasattr(self, 'log_textbox') and self.log_textbox is not None:
                    self.log_textbox.see("end")
            
            # Update progress if it's a progress message
            self._update_progress_from_log(message)
            
            if hasattr(self, 'update_idletasks'):
                self.update_idletasks()
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói update log UI: {e}")
    
    def _update_progress_from_log(self, message):
        """C·∫≠p nh·∫≠t progress bar t·ª´ log messages"""
        try:
            import re
            
            # Pattern: "Ho√†n th√†nh chunk X/Y"
            match1 = re.search(r'Ho√†n th√†nh chunk (\d+)/(\d+)', message)
            if match1:
                current = int(match1.group(1))
                total = int(match1.group(2))
                progress_percent = (current / total)
                self.progress_bar.set(progress_percent)
                self.progress_text.configure(text=f"Ho√†n th√†nh chunk {current}/{total} ({progress_percent*100:.1f}%)")
                return
            
            # Pattern: "Ti·∫øn ƒë·ªô: X/Y chunks"
            match2 = re.search(r'Ti·∫øn ƒë·ªô: (\d+)/(\d+) chunks \((\d+\.?\d*)%\)', message)
            if match2:
                current = int(match2.group(1))
                total = int(match2.group(2))
                percent = float(match2.group(3))
                self.progress_bar.set(percent / 100)
                self.progress_text.configure(text=f"Ti·∫øn ƒë·ªô: {current}/{total} chunks ({percent:.1f}%)")
                return
                
        except Exception:
            pass
    
    def log(self, message):
        """Ghi log v√†o text area"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_message = f"[{timestamp}] {message}"
            
            if hasattr(self, 'log_textbox') and self.log_textbox is not None:
                self.log_textbox.insert("end", log_message + "\n")
            
            if hasattr(self, 'auto_scroll_var') and self.auto_scroll_var.get():
                if hasattr(self, 'log_textbox') and self.log_textbox is not None:
                    self.log_textbox.see("end")
                
            if hasattr(self, 'update_idletasks'):
                self.update_idletasks()
            
            print(message)  # Also print to console
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói log GUI: {e} - Message: {message}")
    
    def clear_logs(self):
        """X√≥a logs"""
        try:
            if hasattr(self, 'log_textbox') and self.log_textbox is not None:
                self.log_textbox.delete("0.0", "end")
            print("üóëÔ∏è ƒê√£ x√≥a logs")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói x√≥a logs: {e}")
    
    def save_logs(self):
        """L∆∞u logs ra file"""
        file_path = filedialog.asksaveasfilename(
            title="L∆∞u logs",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            try:
                content = self.log_textbox.get("0.0", "end")
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                self.log(f"üíæ ƒê√£ l∆∞u logs v√†o: {file_path}")
            except Exception as e:
                self.log(f"‚ùå L·ªói l∆∞u logs: {e}")
    
    def toggle_translation(self):
        """Toggle gi·ªØa b·∫Øt ƒë·∫ßu d·ªãch v√† d·ª´ng d·ªãch"""
        if self.is_translating:
            # ƒêang d·ªãch -> D·ª´ng
            set_stop_translation()
            self.log("üõë ƒê√£ y√™u c·∫ßu d·ª´ng d·ªãch...")
            self.translate_btn.configure(text="‚è≥ ƒêang d·ª´ng...", state="disabled")
        else:
            # Ch∆∞a d·ªãch ho·∫∑c ƒë√£ d·ª´ng -> B·∫Øt ƒë·∫ßu/Ti·∫øp t·ª•c d·ªãch
            self.start_translation()
    
    def continue_translation(self):
        """Ti·∫øp t·ª•c d·ªãch t·ª´ n∆°i ƒë√£ d·ª´ng"""
        # Ki·ªÉm tra xem c√≥ file input kh√¥ng
        if not self.input_file_var.get().strip():
            show_error("Vui l√≤ng ch·ªçn file input tr∆∞·ªõc!", parent=self)
            return
        
        # Ki·ªÉm tra API key
        if not self.api_key_var.get().strip():
            show_error("Vui l√≤ng nh·∫≠p API Key!", parent=self)
            return
        
        self.log("‚ñ∂Ô∏è Ti·∫øp t·ª•c d·ªãch t·ª´ n∆°i ƒë√£ d·ª´ng...")
        self.start_translation()
    
    def start_translation(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªãch"""
        if not TRANSLATE_AVAILABLE:
            show_error("Kh√¥ng th·ªÉ import module d·ªãch. Vui l√≤ng ki·ªÉm tra l·∫°i file translate.py", parent=self)
            return
            
        # Validate inputs
        if not self.api_key_var.get().strip():
            show_error("Vui l√≤ng nh·∫≠p API Key", parent=self)
            return
            
        if not self.input_file_var.get().strip():
            show_error("Vui l√≤ng ch·ªçn file input", parent=self)
            return
            
        if not os.path.exists(self.input_file_var.get()):
            show_error("File input kh√¥ng t·ªìn t·∫°i", parent=self)
            return
        
        output_file = self.output_file_var.get().strip()
        if not output_file:
            output_file = generate_output_filename(self.input_file_var.get())
            self.output_file_var.set(output_file)
            self.log(f"üìù T·ª± ƒë·ªông t·∫°o t√™n file output: {os.path.basename(output_file)}")
        
        # Check if input and output are the same
        if os.path.abspath(self.input_file_var.get()) == os.path.abspath(output_file):
            show_error("File input v√† output kh√¥ng th·ªÉ gi·ªëng nhau!", parent=self)
            return
        
        # Warn if output file exists (only for new translation, not continue)
        if not is_translation_stopped() and os.path.exists(output_file):
            progress_file = f"{self.input_file_var.get()}.progress.json"
            if not os.path.exists(progress_file):  # Only warn if not continuing
                result = show_question(
                    f"File output ƒë√£ t·ªìn t·∫°i:\n{os.path.basename(output_file)}\n\nB·∫°n c√≥ mu·ªën ghi ƒë√® kh√¥ng?",
                    parent=self
                )
                if not result:
                    return
        
        # Start translation
        self.is_translating = True
        self.translate_btn.configure(
            state="normal", 
            text="üõë D·ª´ng D·ªãch",
            fg_color=("red", "darkred"),
            hover_color=("darkred", "red")
        )
        self.progress_bar.set(0)
        self.progress_text.configure(text="ƒêang d·ªãch...")
        
        # Setup log capture
        self.setup_log_capture()
        
        # Validate performance settings
        try:
            num_threads = int(self.threads_var.get())
            if num_threads < 1 or num_threads > 50:
                show_warning("S·ªë threads ph·∫£i t·ª´ 1 ƒë·∫øn 50!", parent=self)
                return
        except ValueError:
            show_warning("S·ªë threads ph·∫£i l√† s·ªë nguy√™n!", parent=self)
            return
            
        try:
            chunk_size = int(self.chunk_size_var.get())
            if chunk_size < 10 or chunk_size > 500:
                show_warning("Chunk size ph·∫£i t·ª´ 10 ƒë·∫øn 500!", parent=self)
                return
        except ValueError:
            show_warning("Chunk size ph·∫£i l√† s·ªë nguy√™n!", parent=self)
            return
        
        self.log("üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªãch...")
        self.log(f"üìÅ Input: {os.path.basename(self.input_file_var.get())}")
        self.log(f"üìÅ Output: {os.path.basename(output_file)}")
        self.log(f"ü§ñ Model: {self.model_var.get()}")
        self.log(f"‚ö° Threads: {num_threads}")
        self.log(f"üì¶ Chunk size: {chunk_size} d√≤ng")
        
        # Run in thread
        self.translation_thread = threading.Thread(
            target=self.run_translation,
            args=(self.input_file_var.get(), output_file, self.api_key_var.get(), self.model_var.get(), self.get_system_instruction(), num_threads, chunk_size),
            daemon=True
        )
        self.translation_thread.start()
        
        # Start monitoring translation status
        self.check_translation_status()
    
    def check_translation_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i d·ªãch ƒë·ªãnh k·ª≥"""
        if self.is_translating:
            if is_translation_stopped():
                # Translation has been stopped
                if is_quota_exceeded():
                    self.log("üí≥ API ƒë√£ h·∫øt quota!")
                    self.is_translating = False
                    self.translate_btn.configure(
                        state="normal", 
                        text="üîÑ C·∫ßn API Key M·ªõi",
                        fg_color=("orange", "darkorange"),
                        hover_color=("darkorange", "orange")
                    )
                    self.progress_text.configure(text="API h·∫øt quota - c·∫ßn API key m·ªõi")
                    self.restore_stdout()
                    
                    # Show quota exceeded dialog
                    self.show_quota_exceeded_dialog()
                    return
                else:
                    self.log("üõë D·ªãch ƒë√£ b·ªã d·ª´ng")
                    self.is_translating = False
                    self.translate_btn.configure(
                        state="normal", 
                        text="‚ñ∂Ô∏è Ti·∫øp T·ª•c D·ªãch",
                        fg_color=("blue", "darkblue"),
                        hover_color=("darkblue", "blue")
                    )
                    self.progress_text.configure(text="ƒê√£ d·ª´ng - c√≥ th·ªÉ ti·∫øp t·ª•c")
                    self.restore_stdout()
                    return
            else:
                # Check again after 1 second
                self.after(1000, self.check_translation_status)
    
    def translation_finished(self):
        """K·∫øt th√∫c qu√° tr√¨nh d·ªãch"""
        self.is_translating = False
        
        # Restore stdout
        self.restore_stdout()
        
        if is_quota_exceeded():
            # API h·∫øt quota
            self.translate_btn.configure(
                state="normal", 
                text="üîÑ C·∫ßn API Key M·ªõi",
                fg_color=("orange", "darkorange"),
                hover_color=("darkorange", "orange")
            )
            self.progress_text.configure(text="API h·∫øt quota - c·∫ßn API key m·ªõi")
        else:
            # D·ªãch ho√†n th√†nh ho·∫∑c b·ªã d·ª´ng b√¨nh th∆∞·ªùng
            self.translate_btn.configure(
                state="normal", 
                text="üöÄ B·∫Øt ƒê·∫ßu D·ªãch",
                fg_color=("blue", "darkblue"),
                hover_color=("darkblue", "blue")
            )
            
            if not self.progress_text.cget("text").startswith("Ho√†n th√†nh"):
                # Check if stopped or failed
                if is_translation_stopped():
                    self.progress_text.configure(text="ƒê√£ d·ª´ng - c√≥ th·ªÉ ti·∫øp t·ª•c")
                else:
                    self.progress_text.configure(text="S·∫µn s√†ng")
    
    def convert_to_epub(self, txt_file):
        """Convert file to EPUB"""
        if not EPUB_AVAILABLE:
            self.log("‚ùå Kh√¥ng th·ªÉ convert EPUB - thi·∫øu module ConvertEpub")
            return
        
        try:
            # Generate file paths
            base_name = os.path.splitext(txt_file)[0]
            docx_file = base_name + ".docx"
            epub_file = base_name + ".epub"
            
            # Get book info
            title = self.book_title_var.get() or os.path.splitext(os.path.basename(txt_file))[0]
            author = self.book_author_var.get() or "Unknown Author"
            pattern = self.get_chapter_pattern()
            
            # Convert TXT to DOCX
            self.log("üìÑ ƒêang convert TXT ‚Üí DOCX...")
            if txt_to_docx(txt_file, docx_file, title, pattern):
                self.log("‚úÖ Convert TXT ‚Üí DOCX ho√†n th√†nh!")
                
                # Convert DOCX to EPUB
                self.log("üìö ƒêang convert DOCX ‚Üí EPUB...")
                if docx_to_epub(docx_file, epub_file, title, author):
                    self.log(f"‚úÖ Convert EPUB ho√†n th√†nh: {epub_file}")
                else:
                    self.log("‚ùå Convert DOCX ‚Üí EPUB th·∫•t b·∫°i")
            else:
                self.log("‚ùå Convert TXT ‚Üí DOCX th·∫•t b·∫°i")
                
        except Exception as e:
            self.log(f"‚ùå L·ªói convert EPUB: {e}")
    
    def save_settings(self):
        """L∆∞u c√†i ƒë·∫∑t"""
        custom_prompt = ""
        if hasattr(self, 'custom_prompt_textbox'):
            custom_prompt = self.custom_prompt_textbox.get("0.0", "end").strip()
            
        settings = {
            "api_key": self.api_key_var.get(),
            "model": self.model_var.get(),
            "context": self.context_var.get(),
            "custom_prompt": custom_prompt,
            "auto_reformat": self.auto_reformat_var.get(),
            "auto_convert_epub": self.auto_convert_epub_var.get(),
            "book_author": self.book_author_var.get(),
            "chapter_pattern": self.chapter_pattern_var.get(),
            "custom_chapter_pattern": self.custom_chapter_pattern_var.get(),
            "threads": self.threads_var.get(),
            "chunk_size": self.chunk_size_var.get()
        }
        
        try:
            with open("settings.json", "w", encoding="utf-8") as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
            self.log("üíæ ƒê√£ l∆∞u c√†i ƒë·∫∑t")
            show_success("ƒê√£ l∆∞u c√†i ƒë·∫∑t!", parent=self)
        except Exception as e:
            self.log(f"‚ùå L·ªói l∆∞u c√†i ƒë·∫∑t: {e}")
            show_error(f"L·ªói l∆∞u c√†i ƒë·∫∑t: {e}", parent=self)
    
    def load_settings(self):
        """T·∫£i c√†i ƒë·∫∑t"""
        try:
            if os.path.exists("settings.json"):
                with open("settings.json", "r", encoding="utf-8") as f:
                    settings = json.load(f)
                
                self.api_key_var.set(settings.get("api_key", ""))
                self.model_var.set(settings.get("model", "gemini-2.0-flash"))
                self.context_var.set(settings.get("context", "B·ªëi c·∫£nh hi·ªán ƒë·∫°i"))
                self.auto_reformat_var.set(settings.get("auto_reformat", True))
                self.auto_convert_epub_var.set(settings.get("auto_convert_epub", False))
                self.book_author_var.set(settings.get("book_author", "Unknown Author"))
                self.chapter_pattern_var.set(settings.get("chapter_pattern", "Ch∆∞∆°ng XX:"))
                self.custom_chapter_pattern_var.set(settings.get("custom_chapter_pattern", r"^Ch∆∞∆°ng\s+\d+:\s+.*$"))
                
                # Load threads - n·∫øu kh√¥ng c√≥ trong settings th√¨ auto-detect
                threads_setting = settings.get("threads")
                if threads_setting:
                    self.threads_var.set(threads_setting)
                else:
                    self.auto_detect_threads(silent=True)
                    
                self.chunk_size_var.set(settings.get("chunk_size", "100"))
                
                # Load custom prompt if exists
                if hasattr(self, 'custom_prompt_textbox') and settings.get("custom_prompt"):
                    self.custom_prompt_textbox.delete("0.0", "end")
                    self.custom_prompt_textbox.insert("0.0", settings.get("custom_prompt"))
                
                # Trigger context change to show/hide custom prompt
                self.on_context_changed(self.context_var.get())
                
                # Trigger chapter pattern change to show/hide custom pattern
                self.on_chapter_pattern_changed(self.chapter_pattern_var.get())
                
                # Trigger EPUB setting change to show/hide EPUB frame
                self.on_epub_setting_changed()
                
                self.log("üìÇ ƒê√£ t·∫£i c√†i ƒë·∫∑t")
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói t·∫£i c√†i ƒë·∫∑t: {e}")
    
    def change_appearance_mode_event(self, new_appearance_mode: str):
        """Thay ƒë·ªïi appearance mode"""
        ctk.set_appearance_mode(new_appearance_mode)
    
    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï"""
        try:
            if self.is_translating:
                result = show_question("ƒêang d·ªãch. B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t?\n\nTi·∫øn ƒë·ªô s·∫Ω ƒë∆∞·ª£c l∆∞u ƒë·ªÉ ti·∫øp t·ª•c sau.", parent=self)
                if result:
                    # D·ª´ng ti·∫øn tr√¨nh d·ªãch
                    set_stop_translation()
                    self.log("üõë D·ª´ng ti·∫øn tr√¨nh d·ªãch do ƒë√≥ng app...")
                    
                    # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ translation threads c√≥ th·ªÉ d·ª´ng
                    time.sleep(0.5)
                    
                    self.cleanup_and_exit()
                else:
                    return  # Kh√¥ng ƒë√≥ng app
            else:
                self.cleanup_and_exit()
        except Exception as e:
            print(f"L·ªói khi ƒë√≥ng: {e}")
            # Force exit
            self.destroy()
    
    def cleanup_and_exit(self):
        """Cleanup v√† tho√°t an to√†n"""
        try:
            # Restore stdout
            self.restore_stdout()
            
            # Cancel any running threads
            if hasattr(self, 'translation_thread') and self.translation_thread:
                # Note: Can't force stop threads, just set flag
                self.is_translating = False
            
            # Clear any pending after calls
            self.after_cancel("all")
            
        except Exception as e:
            print(f"L·ªói cleanup: {e}")
        finally:
            # Force destroy
            self.destroy()

    def on_epub_setting_changed(self):
        """X·ª≠ l√Ω khi thay ƒë·ªïi c√†i ƒë·∫∑t auto convert EPUB"""
        if self.auto_convert_epub_var.get():
            self.epub_frame.grid(row=2, column=0, sticky="ew", padx=20, pady=10)
        else:
            self.epub_frame.grid_remove()
    
    def on_chapter_pattern_changed(self, choice):
        """X·ª≠ l√Ω khi thay ƒë·ªïi chapter pattern"""
        pattern_map = {
            "Ch∆∞∆°ng XX:": r"^Ch∆∞∆°ng\s+\d+:\s+.*$",
            "Ch∆∞∆°ng XX": r"^Ch∆∞∆°ng\s+\d+(?:\s+.*)?$",
            "XXX": r"^\d{3}(?:\s+.*)?$",
            "XXX:": r"^\d{3}:\s+.*$",
            "Ph·∫ßn X:": r"^Ph·∫ßn\s+\d+:\s+.*$",
            "Ph·∫ßn X": r"^Ph·∫ßn\s+\d+(?:\s+.*)?$",
            "Chapter X:": r"^Chapter\s+\d+:\s+.*$",
            "Chapter X": r"^Chapter\s+\d+(?:\s+.*)?$",
            "Á¨¨XÁ´†": r"^Á¨¨\d+Á´†(?:\s+.*)?$",
            "Á¨¨XÁ´†:": r"^Á¨¨\d+Á´†:\s+.*$"
        }
        
        if choice == "T√πy ch·ªânh":
            self.custom_pattern_frame.grid(row=5, column=0, sticky="ew", padx=0, pady=0)
        else:
            self.custom_pattern_frame.grid_remove()
            # C·∫≠p nh·∫≠t pattern t∆∞∆°ng ·ª©ng
            if choice in pattern_map:
                self.custom_chapter_pattern_var.set(pattern_map[choice])
    
    def get_chapter_pattern(self):
        """L·∫•y chapter pattern hi·ªán t·∫°i"""
        if self.chapter_pattern_var.get() == "T√πy ch·ªânh":
            return self.custom_chapter_pattern_var.get()
        else:
            pattern_map = {
                "Ch∆∞∆°ng XX:": r"^Ch∆∞∆°ng\s+\d+:\s+.*$",
                "Ch∆∞∆°ng XX": r"^Ch∆∞∆°ng\s+\d+(?:\s+.*)?$",
                "XXX": r"^\d{3}(?:\s+.*)?$",
                "XXX:": r"^\d{3}:\s+.*$",
                "Ph·∫ßn X:": r"^Ph·∫ßn\s+\d+:\s+.*$",
                "Ph·∫ßn X": r"^Ph·∫ßn\s+\d+(?:\s+.*)?$",
                "Chapter X:": r"^Chapter\s+\d+:\s+.*$",
                "Chapter X": r"^Chapter\s+\d+(?:\s+.*)?$",
                "Á¨¨XÁ´†": r"^Á¨¨\d+Á´†(?:\s+.*)?$",
                "Á¨¨XÁ´†:": r"^Á¨¨\d+Á´†:\s+.*$"
            }
            return pattern_map.get(self.chapter_pattern_var.get(), r"^Ch∆∞∆°ng\s+\d+:\s+.*$")

    def run_translation(self, input_file, output_file, api_key, model_name, system_instruction, num_threads, chunk_size):
        """Ch·∫°y qu√° tr√¨nh d·ªãch"""
        try:
            self.start_time = time.time()
            
            success = translate_file_optimized(
                input_file=input_file,
                output_file=output_file,
                api_key=api_key,
                model_name=model_name,
                system_instruction=system_instruction,
                num_workers=num_threads,
                chunk_size_lines=chunk_size
            )
            
            if success:
                self.log("‚úÖ D·ªãch ho√†n th√†nh!")
                
                # Auto reformat if enabled
                if self.auto_reformat_var.get():
                    self.log("üîÑ ƒêang reformat file...")
                    try:
                        fix_text_format(output_file)
                        self.log("‚úÖ Reformat ho√†n th√†nh!")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è L·ªói reformat: {e}")
                
                # Auto convert to EPUB if enabled
                if self.auto_convert_epub_var.get() and EPUB_AVAILABLE:
                    self.log("üìö ƒêang convert sang EPUB...")
                    try:
                        self.convert_to_epub(output_file)
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è L·ªói convert EPUB: {e}")
                
                elapsed_time = time.time() - self.start_time
                self.log(f"‚è±Ô∏è Th·ªùi gian ho√†n th√†nh: {elapsed_time:.1f} gi√¢y")
                self.after(0, lambda: self.progress_text.configure(text="Ho√†n th√†nh!"))
                self.after(0, lambda: self.progress_bar.set(1.0))
                show_success(f"D·ªãch ho√†n th√†nh!\nFile: {os.path.basename(output_file)}", 
                           details=f"ƒê∆∞·ªùng d·∫´n: {output_file}", parent=self)
            else:
                # Translation failed or stopped
                if is_quota_exceeded():
                    self.log("üí≥ D·ªãch d·ª´ng do API h·∫øt quota")
                    show_error("API ƒë√£ h·∫øt quota!\n\nVui l√≤ng t·∫°o t√†i kho·∫£n Google Cloud m·ªõi ƒë·ªÉ nh·∫≠n 300$ credit mi·ªÖn ph√≠.", 
                             details="Ti·∫øn ƒë·ªô ƒë√£ ƒë∆∞·ª£c l∆∞u, b·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c khi c√≥ API key m·ªõi.", parent=self)
                else:
                    self.log("‚ùå D·ªãch th·∫•t b·∫°i")
                    show_error("Qu√° tr√¨nh d·ªãch th·∫•t b·∫°i", parent=self)
                
        except Exception as e:
            self.log(f"‚ùå L·ªói: {e}")
            show_error(f"ƒê√£ x·∫£y ra l·ªói: {e}", details=str(e), parent=self)
        finally:
            self.after(0, self.translation_finished)

    def test_api_connection(self):
        """Test API connection"""
        api_key = self.api_key_var.get().strip()
        if not api_key:
            show_error("Vui l√≤ng nh·∫≠p API Key tr∆∞·ªõc!", parent=self)
            return
        
        self.log("üß™ ƒêang test k·∫øt n·ªëi API...")
        
        # Test in background thread
        def test_api():
            try:
                import google.generativeai as genai
                genai.configure(api_key=api_key)
                
                model = genai.GenerativeModel(self.model_var.get())
                response = model.generate_content("Hello")
                
                if response.text:
                    self.after(0, lambda: self.log("‚úÖ K·∫øt n·ªëi API th√†nh c√¥ng!"))
                    self.after(0, lambda: show_success("K·∫øt n·ªëi API th√†nh c√¥ng!", parent=self))
                else:
                    self.after(0, lambda: self.log("‚ùå API tr·∫£ v·ªÅ response r·ªóng"))
                    self.after(0, lambda: show_error("API tr·∫£ v·ªÅ response r·ªóng", parent=self))
                    
            except Exception as e:
                error_msg = str(e)
                self.after(0, lambda: self.log(f"‚ùå L·ªói API: {error_msg}"))
                self.after(0, lambda: show_error(f"L·ªói k·∫øt n·ªëi API:\n{error_msg}", parent=self))
        
        threading.Thread(target=test_api, daemon=True).start()

    def set_light_mode(self):
        """Set light mode v√† c·∫≠p nh·∫≠t button colors"""
        ctk.set_appearance_mode("light")
        self.update_appearance_buttons("light")
        self.log("‚òÄÔ∏è ƒê√£ chuy·ªÉn sang Light Mode")
    
    def set_dark_mode(self):
        """Set dark mode v√† c·∫≠p nh·∫≠t button colors"""
        ctk.set_appearance_mode("dark")
        self.update_appearance_buttons("dark")
        self.log("üåô ƒê√£ chuy·ªÉn sang Dark Mode")
    
    def update_appearance_buttons(self, current_mode=None):
        """C·∫≠p nh·∫≠t m√†u s·∫Øc appearance buttons d·ª±a tr√™n mode hi·ªán t·∫°i"""
        if current_mode is None:
            # Get current appearance mode
            try:
                current_mode = ctk.get_appearance_mode().lower()
            except:
                current_mode = "dark"  # Default
        
        try:
            if current_mode == "light":
                # Light mode active
                self.light_mode_btn.configure(
                    fg_color=("orange", "darkorange"),
                    hover_color=("darkorange", "orange")
                )
                self.dark_mode_btn.configure(
                    fg_color=("gray", "darkgray"),
                    hover_color=("darkgray", "gray")
                )
            else:
                # Dark mode active
                self.dark_mode_btn.configure(
                    fg_color=("blue", "darkblue"),
                    hover_color=("darkblue", "blue")
                )
                self.light_mode_btn.configure(
                    fg_color=("gray", "darkgray"),
                    hover_color=("darkgray", "gray")
                )
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói c·∫≠p nh·∫≠t appearance buttons: {e}")

    def show_quota_exceeded_dialog(self):
        """Hi·ªÉn th·ªã dialog h∆∞·ªõng d·∫´n khi API h·∫øt quota"""
        quota_message = """üö® API Google AI ƒë√£ h·∫øt quota mi·ªÖn ph√≠!

üí° Gi·∫£i ph√°p: T·∫°o t√†i kho·∫£n Google Cloud m·ªõi ƒë·ªÉ nh·∫≠n 300$ credit mi·ªÖn ph√≠

üìã H∆∞·ªõng d·∫´n chi ti·∫øt:

1Ô∏è‚É£ Truy c·∫≠p: https://cloud.google.com/
2Ô∏è‚É£ ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi (email kh√°c)
3Ô∏è‚É£ Nh·∫≠n 300$ credit mi·ªÖn ph√≠
4Ô∏è‚É£ T·∫°o API key m·ªõi t·∫°i: https://ai.google.dev/
5Ô∏è‚É£ C·∫≠p nh·∫≠t API key trong ·ª©ng d·ª•ng
6Ô∏è‚É£ Ti·∫øp t·ª•c d·ªãch t·ª´ n∆°i ƒë√£ d·ª´ng

üíæ Ti·∫øn ƒë·ªô d·ªãch ƒë√£ ƒë∆∞·ª£c l∆∞u, b·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c ngay khi c√≥ API key m·ªõi!

üîó Link h·ªØu √≠ch:
- Google Cloud Console: https://console.cloud.google.com/
- Google AI Studio: https://aistudio.google.com/
- H∆∞·ªõng d·∫´n t·∫°o API key: https://ai.google.dev/gemini-api/docs/api-key"""

        try:
            # Create custom dialog window
            dialog = ctk.CTkToplevel(self)
            dialog.title("üí≥ API H·∫øt Quota")
            dialog.geometry("650x700")
            dialog.transient(self)
            dialog.grab_set()
            
            # Center the dialog
            dialog.update_idletasks()
            x = (dialog.winfo_screenwidth() // 2) - (650 // 2)
            y = (dialog.winfo_screenheight() // 2) - (700 // 2)
            dialog.geometry(f"+{x}+{y}")
            
            # Main frame
            main_frame = ctk.CTkFrame(dialog)
            main_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # Title
            title_label = ctk.CTkLabel(
                main_frame,
                text="üí≥ API Google AI ƒê√£ H·∫øt Quota",
                font=ctk.CTkFont(size=20, weight="bold"),
                text_color=("red", "orange")
            )
            title_label.pack(pady=(20, 10))
            
            # Scrollable text area for message
            text_frame = ctk.CTkScrollableFrame(main_frame)
            text_frame.pack(fill="both", expand=True, padx=20, pady=10)
            
            message_label = ctk.CTkLabel(
                text_frame,
                text=quota_message,
                justify="left",
                wraplength=550,
                font=ctk.CTkFont(size=12)
            )
            message_label.pack(fill="x", padx=10, pady=10)
            
            # Button frame
            button_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
            button_frame.pack(fill="x", padx=20, pady=(10, 20))
            
            # Copy links button
            def copy_google_cloud_link():
                import tkinter as tk
                try:
                    dialog.clipboard_clear()
                    dialog.clipboard_append("https://cloud.google.com/")
                    show_toast_success("ƒê√£ copy link Google Cloud!")
                except:
                    pass
            
            def copy_ai_studio_link():
                import tkinter as tk
                try:
                    dialog.clipboard_clear()
                    dialog.clipboard_append("https://aistudio.google.com/")
                    show_toast_success("ƒê√£ copy link AI Studio!")
                except:
                    pass
            
            copy_gc_btn = ctk.CTkButton(
                button_frame,
                text="üìã Copy Link Google Cloud",
                command=copy_google_cloud_link,
                width=180
            )
            copy_gc_btn.pack(side="left", padx=(0, 10))
            
            copy_ai_btn = ctk.CTkButton(
                button_frame,
                text="üìã Copy Link AI Studio", 
                command=copy_ai_studio_link,
                width=180
            )
            copy_ai_btn.pack(side="left", padx=10)
            
            close_btn = ctk.CTkButton(
                button_frame,
                text="‚úÖ ƒê√£ Hi·ªÉu",
                command=dialog.destroy,
                width=100,
                fg_color=("green", "darkgreen"),
                hover_color=("darkgreen", "green")
            )
            close_btn.pack(side="right")
            
        except Exception as e:
            # Fallback to simple error dialog
            show_error("API ƒë√£ h·∫øt quota!\n\nVui l√≤ng t·∫°o t√†i kho·∫£n Google Cloud m·ªõi ƒë·ªÉ nh·∫≠n 300$ credit mi·ªÖn ph√≠.\n\nTruy c·∫≠p: https://cloud.google.com/", parent=self)
            self.log(f"‚ö†Ô∏è L·ªói hi·ªÉn th·ªã quota dialog: {e}")

def main():
    app = ModernTranslateNovelAI()
    app.protocol("WM_DELETE_WINDOW", app.on_closing)
    app.mainloop()

if __name__ == "__main__":
    main() 