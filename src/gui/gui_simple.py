import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import os
import sys
import time
from datetime import datetime
import json
import re
import io
from contextlib import redirect_stdout

# Import translate functions
try:
    from ..core.translate import translate_file_optimized, generate_output_filename
    from ..core.reformat import fix_text_format
    from ..core.ConvertEpub import txt_to_docx, docx_to_epub
    TRANSLATE_AVAILABLE = True
    EPUB_AVAILABLE = True
except ImportError as e:
    TRANSLATE_AVAILABLE = False
    EPUB_AVAILABLE = False
    print(f"‚ö†Ô∏è L·ªói import: {e}")

class LogCapture:
    """Class ƒë·ªÉ capture print statements v√† chuy·ªÉn v·ªÅ GUI"""
    def __init__(self, gui_log_function):
        self.gui_log = gui_log_function
        self.terminal = sys.stdout
        
    def write(self, message):
        # Ghi v√†o terminal nh∆∞ b√¨nh th∆∞·ªùng (ki·ªÉm tra None tr∆∞·ªõc)
        if self.terminal is not None:
            try:
                self.terminal.write(message)
                self.terminal.flush()
            except:
                pass  # B·ªè qua l·ªói terminal write
        
        # G·ª≠i v·ªÅ GUI (lo·∫°i b·ªè newline ƒë·ªÉ GUI t·ª± x·ª≠ l√Ω)
        if message.strip() and self.gui_log is not None:
            try:
                self.gui_log(message.strip())
            except:
                pass  # B·ªè qua l·ªói GUI update
    
    def flush(self):
        if self.terminal is not None:
            try:
                self.terminal.flush()
            except:
                pass

class TranslateNovelAI:
    def __init__(self, root):
        self.root = root
        self.root.title("ü§ñ TranslateNovelAI")
        self.root.geometry("900x700")
        self.root.configure(bg='#f0f0f0')
        
        # Variables
        self.input_file_var = tk.StringVar()
        self.output_file_var = tk.StringVar()
        self.api_key_var = tk.StringVar()
        self.model_var = tk.StringVar(value="gemini-2.0-flash")
        self.context_var = tk.StringVar(value="B·ªëi c·∫£nh hi·ªán ƒë·∫°i")
        self.auto_reformat_var = tk.BooleanVar(value=True)
        self.auto_convert_epub_var = tk.BooleanVar(value=False)
        self.book_title_var = tk.StringVar()
        self.book_author_var = tk.StringVar(value="Unknown Author")
        self.chapter_pattern_var = tk.StringVar(value=r"^Ch∆∞∆°ng\s+\d+:\s+.*$")
        
        # Translation state
        self.is_translating = False
        self.translation_thread = None
        self.total_chunks = 0
        self.completed_chunks = 0
        self.start_time = 0
        
        # Log capture
        self.original_stdout = sys.stdout
        self.log_capture = None
        
        # Setup GUI
        self.setup_gui()
        
        # Load settings
        self.load_settings()
        
    def setup_gui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ch√≠nh v·ªõi tabs"""
        # Main frame
        main_frame = tk.Frame(self.root, bg='#f0f0f0', padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title_label = tk.Label(
            main_frame, 
            text="ü§ñ TranslateNovelAI", 
            font=("Arial", 24, "bold"),
            bg='#f0f0f0',
            fg='#2c3e50'
        )
        title_label.pack(pady=(0, 20))
        
        # Create notebook for tabs
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Create tabs
        self.create_translate_tab()
        self.create_settings_tab()
        self.create_epub_tab()
        self.create_logs_tab()
        
    def create_translate_tab(self):
        """Tab ch√≠nh cho d·ªãch truy·ªán"""
        translate_frame = ttk.Frame(self.notebook)
        self.notebook.add(translate_frame, text="üöÄ D·ªãch Truy·ªán")
        
        # API Configuration
        api_frame = tk.LabelFrame(translate_frame, text="üîë API Configuration", 
                                 font=("Arial", 10, "bold"), padx=15, pady=15)
        api_frame.pack(fill=tk.X, pady=(0, 15))
        
        tk.Label(api_frame, text="Google AI API Key:").pack(anchor=tk.W)
        api_entry = tk.Entry(api_frame, textvariable=self.api_key_var, width=60, show="*")
        api_entry.pack(fill=tk.X, pady=(5, 10))
        
        # Model selection
        model_frame = tk.Frame(api_frame)
        model_frame.pack(fill=tk.X)
        
        tk.Label(model_frame, text="Model:").pack(side=tk.LEFT)
        model_combo = ttk.Combobox(
            model_frame,
            textvariable=self.model_var,
            values=["gemini-2.0-flash", "gemini-1.5-flash", "gemini-1.5-pro"],
            state="readonly",
            width=20
        )
        model_combo.pack(side=tk.LEFT, padx=(10, 0))
        
        # Context selection
        context_frame = tk.Frame(api_frame)
        context_frame.pack(fill=tk.X, pady=(10, 0))
        
        tk.Label(context_frame, text="B·ªëi c·∫£nh d·ªãch:").pack(side=tk.LEFT)
        context_combo = ttk.Combobox(
            context_frame,
            textvariable=self.context_var,
            values=[
                "B·ªëi c·∫£nh hi·ªán ƒë·∫°i",
                "B·ªëi c·∫£nh c·ªï ƒë·∫°i", 
                "B·ªëi c·∫£nh fantasy/vi·ªÖn t∆∞·ªüng",
                "B·ªëi c·∫£nh h·ªçc ƒë∆∞·ªùng",
                "B·ªëi c·∫£nh c√¥ng s·ªü",
                "B·ªëi c·∫£nh l√£ng m·∫°n",
                "B·ªëi c·∫£nh h√†nh ƒë·ªông",
                "T√πy ch·ªânh"
            ],
            state="readonly",
            width=25
        )
        context_combo.pack(side=tk.LEFT, padx=(10, 0))
        context_combo.set("B·ªëi c·∫£nh hi·ªán ƒë·∫°i")  # Set default
        
        # Custom prompt frame (initially hidden)
        self.custom_prompt_frame = tk.Frame(api_frame)
        
        tk.Label(self.custom_prompt_frame, text="Custom Prompt:").pack(anchor=tk.W, pady=(10, 5))
        self.custom_prompt_var = tk.StringVar()
        self.custom_prompt_entry = tk.Text(
            self.custom_prompt_frame,
            height=3,
            width=60,
            wrap=tk.WORD,
            font=("Arial", 9)
        )
        self.custom_prompt_entry.pack(fill=tk.X, pady=(0, 10))
        
        # Bind context selection to show/hide custom prompt
        context_combo.bind('<<ComboboxSelected>>', self.on_context_changed)
        
        # File Selection
        file_frame = tk.LabelFrame(translate_frame, text="üìÅ File Selection", 
                                  font=("Arial", 10, "bold"), padx=15, pady=15)
        file_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Input file
        tk.Label(file_frame, text="Input File:").pack(anchor=tk.W)
        input_path_frame = tk.Frame(file_frame)
        input_path_frame.pack(fill=tk.X, pady=(5, 10))
        
        input_entry = tk.Entry(input_path_frame, textvariable=self.input_file_var)
        input_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        input_btn = tk.Button(
            input_path_frame,
            text="Browse",
            command=self.browse_input_file,
            bg='#3498db',
            fg='white',
            relief=tk.FLAT
        )
        input_btn.pack(side=tk.RIGHT, padx=(10, 0))
        
        # Output file
        tk.Label(file_frame, text="Output File (t·ª± ƒë·ªông t·∫°o n·∫øu ƒë·ªÉ tr·ªëng, n√∫t Reset ƒë·ªÉ t·∫°o l·∫°i):").pack(anchor=tk.W)
        output_path_frame = tk.Frame(file_frame)
        output_path_frame.pack(fill=tk.X, pady=(5, 0))
        
        output_entry = tk.Entry(output_path_frame, textvariable=self.output_file_var)
        output_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        output_btn = tk.Button(
            output_path_frame,
            text="Browse",
            command=self.browse_output_file,
            bg='#3498db',
            fg='white',
            relief=tk.FLAT,
            width=8
        )
        output_btn.pack(side=tk.RIGHT, padx=(5, 0))
        
        reset_output_btn = tk.Button(
            output_path_frame,
            text="üîÑ Reset",
            command=self.reset_output_filename,
            bg='#95a5a6',
            fg='white',
            relief=tk.FLAT,
            width=8
        )
        reset_output_btn.pack(side=tk.RIGHT, padx=(5, 0))
        
        # Options
        options_frame = tk.LabelFrame(translate_frame, text="‚öôÔ∏è Options", 
                                     font=("Arial", 10, "bold"), padx=15, pady=15)
        options_frame.pack(fill=tk.X, pady=(0, 15))
        
        reformat_check = tk.Checkbutton(
            options_frame,
            text="‚úÖ T·ª± ƒë·ªông reformat file sau khi d·ªãch",
            variable=self.auto_reformat_var
        )
        reformat_check.pack(anchor=tk.W)
        
        epub_check = tk.Checkbutton(
            options_frame,
            text="üìö T·ª± ƒë·ªông convert sang EPUB sau khi d·ªãch",
            variable=self.auto_convert_epub_var,
            command=self.toggle_epub_options
        )
        epub_check.pack(anchor=tk.W, pady=(5, 0))
        
        # Control buttons
        control_frame = tk.Frame(translate_frame)
        control_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.translate_btn = tk.Button(
            control_frame,
            text="üöÄ B·∫Øt ƒê·∫ßu D·ªãch",
            command=self.start_translation,
            bg='#27ae60',
            fg='white',
            font=("Arial", 12, "bold"),
            relief=tk.FLAT,
            width=20
        )
        self.translate_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        save_btn = tk.Button(
            control_frame,
            text="üíæ L∆∞u C√†i ƒê·∫∑t",
            command=self.save_settings,
            bg='#f39c12',
            fg='white',
            font=("Arial", 12, "bold"),
            relief=tk.FLAT,
            width=15
        )
        save_btn.pack(side=tk.RIGHT)
        
        # Progress
        progress_frame = tk.LabelFrame(translate_frame, text="üìä Progress", 
                                      font=("Arial", 10, "bold"), padx=15, pady=15)
        progress_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.progress_var = tk.StringVar(value="S·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu...")
        self.progress_label = tk.Label(progress_frame, textvariable=self.progress_var)
        self.progress_label.pack(anchor=tk.W, pady=(0, 5))
        
        self.progress_bar = ttk.Progressbar(progress_frame, mode='determinate')
        self.progress_bar.pack(fill=tk.X, pady=(0, 10))
        
        # Mini log area in translate tab
        mini_log_frame = tk.LabelFrame(translate_frame, text="üìù Logs (Xem chi ti·∫øt ·ªü tab Logs)", 
                                      font=("Arial", 9, "bold"), padx=10, pady=10)
        mini_log_frame.pack(fill=tk.BOTH, expand=True)
        
        self.mini_log_text = scrolledtext.ScrolledText(
            mini_log_frame,
            height=8,
            font=("Consolas", 8),
            wrap=tk.WORD
        )
        self.mini_log_text.pack(fill=tk.BOTH, expand=True)
        
    def create_settings_tab(self):
        """Tab c√†i ƒë·∫∑t"""
        settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(settings_frame, text="‚öôÔ∏è C√†i ƒê·∫∑t")
        
        # API Settings
        api_settings_frame = tk.LabelFrame(settings_frame, text="üîë API Settings", 
                                          font=("Arial", 10, "bold"), padx=15, pady=15)
        api_settings_frame.pack(fill=tk.X, pady=(0, 15))
        
        tk.Label(api_settings_frame, text="Google AI API Key:").pack(anchor=tk.W)
        api_settings_entry = tk.Entry(api_settings_frame, textvariable=self.api_key_var, width=60, show="*")
        api_settings_entry.pack(fill=tk.X, pady=(5, 10))
        
        tk.Label(api_settings_frame, text="Model:").pack(anchor=tk.W)
        model_settings_combo = ttk.Combobox(
            api_settings_frame,
            textvariable=self.model_var,
            values=["gemini-2.0-flash", "gemini-1.5-flash", "gemini-1.5-pro"],
            state="readonly"
        )
        model_settings_combo.pack(fill=tk.X, pady=(5, 10))
        
        tk.Label(api_settings_frame, text="B·ªëi c·∫£nh d·ªãch:").pack(anchor=tk.W)
        context_settings_combo = ttk.Combobox(
            api_settings_frame,
            textvariable=self.context_var,
            values=[
                "B·ªëi c·∫£nh hi·ªán ƒë·∫°i",
                "B·ªëi c·∫£nh c·ªï ƒë·∫°i", 
                "B·ªëi c·∫£nh fantasy/vi·ªÖn t∆∞·ªüng",
                "B·ªëi c·∫£nh h·ªçc ƒë∆∞·ªùng",
                "B·ªëi c·∫£nh c√¥ng s·ªü",
                "B·ªëi c·∫£nh l√£ng m·∫°n",
                "B·ªëi c·∫£nh h√†nh ƒë·ªông",
                "T√πy ch·ªânh"
            ],
            state="readonly"
        )
        context_settings_combo.pack(fill=tk.X, pady=(5, 0))
        context_settings_combo.bind('<<ComboboxSelected>>', self.on_context_changed)
        
        # Translation Settings
        translate_settings_frame = tk.LabelFrame(settings_frame, text="üöÄ Translation Settings", 
                                                font=("Arial", 10, "bold"), padx=15, pady=15)
        translate_settings_frame.pack(fill=tk.X, pady=(0, 15))
        
        auto_reformat_check = tk.Checkbutton(
            translate_settings_frame,
            text="T·ª± ƒë·ªông reformat file sau khi d·ªãch",
            variable=self.auto_reformat_var
        )
        auto_reformat_check.pack(anchor=tk.W)
        
        auto_epub_check = tk.Checkbutton(
            translate_settings_frame,
            text="T·ª± ƒë·ªông convert sang EPUB sau khi d·ªãch",
            variable=self.auto_convert_epub_var
        )
        auto_epub_check.pack(anchor=tk.W, pady=(5, 0))
        
        # Performance Settings
        perf_frame = tk.LabelFrame(settings_frame, text="üìä Performance Settings", 
                                  font=("Arial", 10, "bold"), padx=15, pady=15)
        perf_frame.pack(fill=tk.X, pady=(0, 15))
        
        tk.Label(perf_frame, text="S·ªë threads (m·∫∑c ƒë·ªãnh: 10):").pack(anchor=tk.W)
        self.threads_var = tk.StringVar(value="10")
        threads_entry = tk.Entry(perf_frame, textvariable=self.threads_var, width=10)
        threads_entry.pack(anchor=tk.W, pady=(5, 10))
        
        tk.Label(perf_frame, text="Chunk size (d√≤ng/chunk, m·∫∑c ƒë·ªãnh: 100):").pack(anchor=tk.W)
        self.chunk_size_var = tk.StringVar(value="100")
        chunk_entry = tk.Entry(perf_frame, textvariable=self.chunk_size_var, width=10)
        chunk_entry.pack(anchor=tk.W, pady=(5, 0))
        
        # Save/Load buttons
        settings_btn_frame = tk.Frame(settings_frame)
        settings_btn_frame.pack(fill=tk.X, pady=(15, 0))
        
        save_settings_btn = tk.Button(
            settings_btn_frame,
            text="üíæ L∆∞u C√†i ƒê·∫∑t",
            command=self.save_settings,
            bg='#27ae60',
            fg='white',
            font=("Arial", 10, "bold"),
            relief=tk.FLAT
        )
        save_settings_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        load_settings_btn = tk.Button(
            settings_btn_frame,
            text="üìÇ T·∫£i C√†i ƒê·∫∑t",
            command=self.load_settings,
            bg='#3498db',
            fg='white',
            font=("Arial", 10, "bold"),
            relief=tk.FLAT
        )
        load_settings_btn.pack(side=tk.LEFT)
        
    def create_epub_tab(self):
        """Tab chuy·ªÉn ƒë·ªïi EPUB"""
        epub_frame = ttk.Frame(self.notebook)
        self.notebook.add(epub_frame, text="üìö EPUB")
        
        # EPUB Settings
        epub_settings_frame = tk.LabelFrame(epub_frame, text="üìö EPUB Settings", 
                                           font=("Arial", 10, "bold"), padx=15, pady=15)
        epub_settings_frame.pack(fill=tk.X, pady=(0, 15))
        
        tk.Label(epub_settings_frame, text="Ti√™u ƒë·ªÅ s√°ch:").pack(anchor=tk.W)
        title_entry = tk.Entry(epub_settings_frame, textvariable=self.book_title_var, width=50)
        title_entry.pack(fill=tk.X, pady=(5, 10))
        
        tk.Label(epub_settings_frame, text="T√°c gi·∫£:").pack(anchor=tk.W)
        author_entry = tk.Entry(epub_settings_frame, textvariable=self.book_author_var, width=50)
        author_entry.pack(fill=tk.X, pady=(5, 10))
        
        tk.Label(epub_settings_frame, text="Pattern nh·∫≠n di·ªán ch∆∞∆°ng (regex):").pack(anchor=tk.W)
        pattern_entry = tk.Entry(epub_settings_frame, textvariable=self.chapter_pattern_var, width=50)
        pattern_entry.pack(fill=tk.X, pady=(5, 0))
        
        # Manual EPUB conversion
        manual_epub_frame = tk.LabelFrame(epub_frame, text="üîÑ Manual EPUB Conversion", 
                                         font=("Arial", 10, "bold"), padx=15, pady=15)
        manual_epub_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.epub_input_var = tk.StringVar()
        tk.Label(manual_epub_frame, text="File TXT ƒë·ªÉ convert:").pack(anchor=tk.W)
        epub_input_frame = tk.Frame(manual_epub_frame)
        epub_input_frame.pack(fill=tk.X, pady=(5, 10))
        
        epub_input_entry = tk.Entry(epub_input_frame, textvariable=self.epub_input_var)
        epub_input_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        epub_browse_btn = tk.Button(
            epub_input_frame,
            text="Browse",
            command=self.browse_epub_input,
            bg='#3498db',
            fg='white',
            relief=tk.FLAT
        )
        epub_browse_btn.pack(side=tk.RIGHT, padx=(10, 0))
        
        convert_epub_btn = tk.Button(
            manual_epub_frame,
            text="üìö Convert to EPUB",
            command=self.convert_to_epub_manual,
            bg='#9b59b6',
            fg='white',
            font=("Arial", 10, "bold"),
            relief=tk.FLAT
        )
        convert_epub_btn.pack(anchor=tk.W)
        
        # EPUB Info
        info_frame = tk.LabelFrame(epub_frame, text="‚ÑπÔ∏è Th√¥ng tin EPUB", 
                                  font=("Arial", 10, "bold"), padx=15, pady=15)
        info_frame.pack(fill=tk.BOTH, expand=True)
        
        info_text = tk.Text(info_frame, height=10, wrap=tk.WORD)
        info_text.pack(fill=tk.BOTH, expand=True)
        
        info_content = """
üìö Chuy·ªÉn ƒë·ªïi EPUB:
‚Ä¢ Chuy·ªÉn ƒë·ªïi t·ª´ TXT ‚Üí DOCX ‚Üí EPUB
‚Ä¢ T·ª± ƒë·ªông nh·∫≠n di·ªán ch∆∞∆°ng d·ª±a tr√™n pattern regex
‚Ä¢ H·ªó tr·ª£ metadata (ti√™u ƒë·ªÅ, t√°c gi·∫£)
‚Ä¢ T·∫°o m·ª•c l·ª•c t·ª± ƒë·ªông

‚öôÔ∏è Y√™u c·∫ßu:
‚Ä¢ C√†i ƒë·∫∑t Pandoc (https://pandoc.org/installing.html)
‚Ä¢ C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n Pandoc trong file ConvertEpub.py

üîß Pattern m·∫∑c ƒë·ªãnh:
‚Ä¢ ^Ch∆∞∆°ng\\s+\\d+:\\s+.*$ (Ch∆∞∆°ng 1: T√™n ch∆∞∆°ng)
‚Ä¢ C√≥ th·ªÉ t√πy ch·ªânh theo ƒë·ªãnh d·∫°ng c·ªßa b·∫°n
        """
        info_text.insert(tk.END, info_content)
        info_text.config(state=tk.DISABLED)
        
    def create_logs_tab(self):
        """Tab logs"""
        logs_frame = ttk.Frame(self.notebook)
        self.notebook.add(logs_frame, text="üìù Logs")
        
        # Log controls
        log_controls_frame = tk.Frame(logs_frame)
        log_controls_frame.pack(fill=tk.X, pady=(0, 10))
        
        clear_log_btn = tk.Button(
            log_controls_frame,
            text="üóëÔ∏è X√≥a Logs",
            command=self.clear_logs,
            bg='#e74c3c',
            fg='white',
            relief=tk.FLAT
        )
        clear_log_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        save_log_btn = tk.Button(
            log_controls_frame,
            text="üíæ L∆∞u Logs",
            command=self.save_logs,
            bg='#27ae60',
            fg='white',
            relief=tk.FLAT
        )
        save_log_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        auto_scroll_var = tk.BooleanVar(value=True)
        auto_scroll_check = tk.Checkbutton(
            log_controls_frame,
            text="üîÑ Auto-scroll",
            variable=auto_scroll_var
        )
        auto_scroll_check.pack(side=tk.LEFT, padx=(10, 0))
        self.auto_scroll_var = auto_scroll_var
        
        # Log text area
        self.log_text = scrolledtext.ScrolledText(
            logs_frame,
            height=25,
            font=("Consolas", 9),
            wrap=tk.WORD
        )
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
    def setup_log_capture(self):
        """Thi·∫øt l·∫≠p log capture ƒë·ªÉ chuy·ªÉn print statements t·ª´ translate.py l√™n GUI"""
        if not self.log_capture:
            self.log_capture = LogCapture(self.log_from_translate)
            sys.stdout = self.log_capture
    
    def restore_stdout(self):
        """Kh√¥i ph·ª•c stdout v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu"""
        if self.log_capture:
            sys.stdout = self.original_stdout
            self.log_capture = None
    
    def log_from_translate(self, message):
        """Nh·∫≠n log t·ª´ translate.py v√† hi·ªÉn th·ªã l√™n GUI"""
        # S·ª≠ d·ª•ng thread-safe method ƒë·ªÉ update GUI
        self.root.after(0, lambda: self._update_log_ui(message))
    
    def _update_log_ui(self, message):
        """Update log UI (thread-safe)"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_message = f"[{timestamp}] {message}"
            
            # Update both main log and mini log (ki·ªÉm tra t·ªìn t·∫°i tr∆∞·ªõc)
            if hasattr(self, 'log_text') and self.log_text is not None:
                self.log_text.insert(tk.END, log_message + "\n")
            if hasattr(self, 'mini_log_text') and self.mini_log_text is not None:
                self.mini_log_text.insert(tk.END, log_message + "\n")
            
            # Auto-scroll if enabled
            if hasattr(self, 'auto_scroll_var') and self.auto_scroll_var.get():
                if hasattr(self, 'log_text') and self.log_text is not None:
                    self.log_text.see(tk.END)
                if hasattr(self, 'mini_log_text') and self.mini_log_text is not None:
                    self.mini_log_text.see(tk.END)
            
            # Limit log size (keep last 1000 lines)
            self._limit_log_size()
            
            # Update progress if it's a progress message
            self._update_progress_from_log(message)
            
            if hasattr(self, 'root') and self.root is not None:
                self.root.update_idletasks()
        except Exception as e:
            # N·∫øu c√≥ l·ªói, in ra console ƒë·ªÉ debug
            print(f"‚ö†Ô∏è L·ªói update log UI: {e}")
    
    def _limit_log_size(self):
        """Gi·ªõi h·∫°n s·ªë d√≤ng log ƒë·ªÉ tr√°nh tr√†n b·ªô nh·ªõ"""
        try:
            max_lines = 1000
            
            # Ki·ªÉm tra t·ª´ng widget ri√™ng bi·ªát
            for attr_name in ['log_text', 'mini_log_text']:
                if hasattr(self, attr_name):
                    log_widget = getattr(self, attr_name)
                    if log_widget is not None:
                        try:
                            lines = log_widget.get("1.0", tk.END).split('\n')
                            if len(lines) > max_lines:
                                # X√≥a c√°c d√≤ng c≈©, gi·ªØ l·∫°i max_lines d√≤ng cu·ªëi
                                log_widget.delete("1.0", f"{len(lines) - max_lines}.0")
                        except Exception:
                            pass  # B·ªè qua l·ªói t·ª´ng widget
        except Exception:
            pass  # B·ªè qua l·ªói t·ªïng th·ªÉ
    
    def _update_progress_from_log(self, message):
        """C·∫≠p nh·∫≠t progress bar t·ª´ log messages"""
        try:
            # T√¨m pattern ti·∫øn ƒë·ªô: "Ho√†n th√†nh chunk X/Y" ho·∫∑c "Ti·∫øn ƒë·ªô: X/Y chunks"
            import re
            
            # Pattern 1: "‚úÖ Ho√†n th√†nh chunk 5/100"
            match1 = re.search(r'Ho√†n th√†nh chunk (\d+)/(\d+)', message)
            if match1:
                current = int(match1.group(1))
                total = int(match1.group(2))
                progress_percent = (current / total) * 100
                self.progress_bar.config(mode='determinate', value=progress_percent)
                self.progress_var.set(f"Ho√†n th√†nh chunk {current}/{total} ({progress_percent:.1f}%)")
                return
            
            # Pattern 2: "Ti·∫øn ƒë·ªô: 45/100 chunks (45.0%)"
            match2 = re.search(r'Ti·∫øn ƒë·ªô: (\d+)/(\d+) chunks \((\d+\.?\d*)%\)', message)
            if match2:
                current = int(match2.group(1))
                total = int(match2.group(2))
                percent = float(match2.group(3))
                self.progress_bar.config(mode='determinate', value=percent)
                self.progress_var.set(f"Ti·∫øn ƒë·ªô: {current}/{total} chunks ({percent:.1f}%)")
                return
            
            # Pattern 3: "T·ªïng s·ªë chunks: X"
            match3 = re.search(r'T·ªïng s·ªë chunks: (\d+)', message)
            if match3:
                self.total_chunks = int(match3.group(1))
                self.progress_bar.config(mode='determinate', maximum=100)
                return
            
            # Pattern 4: "ƒê√£ ho√†n th√†nh X chunk tr∆∞·ªõc ƒë√≥"
            match4 = re.search(r'ƒê√£ ho√†n th√†nh (\d+) chunk tr∆∞·ªõc ƒë√≥', message)
            if match4:
                self.completed_chunks = int(match4.group(1))
                if self.total_chunks > 0:
                    progress_percent = (self.completed_chunks / self.total_chunks) * 100
                    self.progress_bar.config(value=progress_percent)
                return
                
        except Exception:
            # N·∫øu c√≥ l·ªói trong vi·ªác parse, b·ªè qua
            pass
    
    def browse_input_file(self):
        """Ch·ªçn file input"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file truy·ªán c·∫ßn d·ªãch",
            filetypes=[
                ("Text files", "*.txt"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            self.input_file_var.set(file_path)
            
            # ALWAYS auto-generate output filename when selecting new input
            output_path = generate_output_filename(file_path)
            self.output_file_var.set(output_path)
            self.log(f"üìÅ T·ª± ƒë·ªông t·∫°o t√™n file output: {os.path.basename(output_path)}")
            
            # Auto-fill book title from filename
            if not self.book_title_var.get() or self.book_title_var.get() == "Unknown Title":
                filename = os.path.splitext(os.path.basename(file_path))[0]
                self.book_title_var.set(filename)
                
            # Reset EPUB input to match current input file
            self.epub_input_var.set(file_path)
    
    def browse_output_file(self):
        """Ch·ªçn file output"""
        # Get the directory of input file for better UX
        initial_dir = ""
        if self.input_file_var.get():
            initial_dir = os.path.dirname(self.input_file_var.get())
            
        file_path = filedialog.asksaveasfilename(
            title="Ch·ªçn n∆°i l∆∞u file ƒë√£ d·ªãch",
            initialdir=initial_dir,
            defaultextension=".txt",
            filetypes=[
                ("Text files", "*.txt"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            self.output_file_var.set(file_path)
            self.log(f"üìÅ ƒê√£ ch·ªçn file output: {os.path.basename(file_path)}")
    
    def browse_epub_input(self):
        """Ch·ªçn file ƒë·ªÉ convert EPUB"""
        # Default to current input file's directory
        initial_dir = ""
        initial_file = ""
        if self.input_file_var.get():
            initial_dir = os.path.dirname(self.input_file_var.get())
            # Suggest the translated file if it exists
            if self.output_file_var.get() and os.path.exists(self.output_file_var.get()):
                initial_file = self.output_file_var.get()
            else:
                initial_file = self.input_file_var.get()
                
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file TXT ƒë·ªÉ convert sang EPUB",
            initialdir=initial_dir,
            initialfile=os.path.basename(initial_file) if initial_file else "",
            filetypes=[
                ("Text files", "*.txt"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            self.epub_input_var.set(file_path)
            
            # Auto-fill book title from selected file if not set
            if not self.book_title_var.get() or self.book_title_var.get() == "Unknown Title":
                filename = os.path.splitext(os.path.basename(file_path))[0]
                # Remove _TranslateAI suffix if present
                if filename.endswith("_TranslateAI"):
                    filename = filename[:-12]
                self.book_title_var.set(filename)
    
    def reset_output_filename(self):
        """Reset output filename to auto-generated name"""
        if not self.input_file_var.get():
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn file input tr∆∞·ªõc!")
            return
            
        output_path = generate_output_filename(self.input_file_var.get())
        self.output_file_var.set(output_path)
        self.log(f"üîÑ ƒê√£ reset t√™n file output: {os.path.basename(output_path)}")
    
    def on_context_changed(self, event=None):
        """X·ª≠ l√Ω khi thay ƒë·ªïi b·ªëi c·∫£nh d·ªãch"""
        if self.context_var.get() == "T√πy ch·ªânh":
            self.custom_prompt_frame.pack(fill=tk.X, pady=(10, 0))
            # Load default custom prompt
            default_custom = "D·ªãch vƒÉn b·∫£n sau sang ti·∫øng Vi·ªát. ƒê·∫£m b·∫£o c√°c c√¢u tho·∫°i nh√¢n v·∫≠t ƒë∆∞·ª£c d·ªãch ch√≠nh x√°c v√† ƒë·∫∑t trong d·∫•u "". ƒê·∫£m b·∫£o gi·ªØ nguy√™n chi ti·∫øt n·ªôi dung."
            self.custom_prompt_entry.delete(1.0, tk.END)
            self.custom_prompt_entry.insert(1.0, default_custom)
        else:
            self.custom_prompt_frame.pack_forget()
    
    def get_system_instruction(self):
        """T·∫°o system instruction d·ª±a tr√™n b·ªëi c·∫£nh ƒë√£ ch·ªçn"""
        context = self.context_var.get()
        
        base_instruction = "D·ªãch vƒÉn b·∫£n sau sang ti·∫øng Vi·ªát. ƒê·∫£m b·∫£o c√°c c√¢u tho·∫°i nh√¢n v·∫≠t ƒë∆∞·ª£c d·ªãch ch√≠nh x√°c v√† ƒë·∫∑t trong d·∫•u "". ƒê·∫£m b·∫£o gi·ªØ nguy√™n chi ti·∫øt n·ªôi dung."
        
        context_instructions = {
            "B·ªëi c·∫£nh hi·ªán ƒë·∫°i": f"{base_instruction} B·ªëi c·∫£nh hi·ªán ƒë·∫°i. Gi·ªØ nguy√™n c√°c t·ª´ ng·ªØ th√¥ t·ª•c, t√¨nh d·ª•c.",
            "B·ªëi c·∫£nh c·ªï ƒë·∫°i": f"{base_instruction} B·ªëi c·∫£nh c·ªï ƒë·∫°i. S·ª≠ d·ª•ng ng√¥n ng·ªØ trang tr·ªçng, l·ªãch s·ª± ph√π h·ª£p th·ªùi k·ª≥ c·ªï ƒë·∫°i. D√πng danh x∆∞ng c·ªï ƒëi·ªÉn nh∆∞ 'ng∆∞∆°i', 'ta', 'h·∫° th·∫ßn'.",
            "B·ªëi c·∫£nh fantasy/vi·ªÖn t∆∞·ªüng": f"{base_instruction} B·ªëi c·∫£nh fantasy/vi·ªÖn t∆∞·ªüng. Gi·ªØ nguy√™n t√™n thu·∫≠t ng·ªØ ma thu·∫≠t, t√™n k·ªπ nƒÉng, t√™n v≈© kh√≠ ƒë·∫∑c bi·ªát. D·ªãch s√°t nghƒ©a c√°c thu·∫≠t ng·ªØ fantasy.",
            "B·ªëi c·∫£nh h·ªçc ƒë∆∞·ªùng": f"{base_instruction} B·ªëi c·∫£nh h·ªçc ƒë∆∞·ªùng. S·ª≠ d·ª•ng ng√¥n ng·ªØ tr·∫ª trung, nƒÉng ƒë·ªông. D·ªãch ch√≠nh x√°c c√°c danh x∆∞ng h·ªçc sinh, th·∫ßy c√¥.",
            "B·ªëi c·∫£nh c√¥ng s·ªü": f"{base_instruction} B·ªëi c·∫£nh c√¥ng s·ªü. S·ª≠ d·ª•ng ng√¥n ng·ªØ l·ªãch s·ª±, trang tr·ªçng ph√π h·ª£p m√¥i tr∆∞·ªùng l√†m vi·ªác. D·ªãch ch√≠nh x√°c ch·ª©c danh, thu·∫≠t ng·ªØ kinh doanh.",
            "B·ªëi c·∫£nh l√£ng m·∫°n": f"{base_instruction} B·ªëi c·∫£nh l√£ng m·∫°n. Ch√∫ tr·ªçng c·∫£m x√∫c, ng√¥n ng·ªØ ng·ªçt ng√†o, l√£ng m·∫°n. D·ªãch tinh t·∫ø c√°c c√¢u t·ªè t√¨nh, bi·ªÉu ƒë·∫°t t√¨nh c·∫£m.",
            "B·ªëi c·∫£nh h√†nh ƒë·ªông": f"{base_instruction} B·ªëi c·∫£nh h√†nh ƒë·ªông. Gi·ªØ nguy√™n t√™n k·ªπ nƒÉng, v≈© kh√≠, thu·∫≠t ng·ªØ chi·∫øn ƒë·∫•u. D·ªãch m·∫°nh m·∫Ω, nƒÉng ƒë·ªông c√°c c·∫£nh h√†nh ƒë·ªông.",
            "T√πy ch·ªânh": self.custom_prompt_entry.get(1.0, tk.END).strip() if hasattr(self, 'custom_prompt_entry') else base_instruction
        }
        
        return context_instructions.get(context, base_instruction)
    
    def toggle_epub_options(self):
        """Toggle EPUB options visibility"""
        if self.auto_convert_epub_var.get():
            self.notebook.tab(2, state="normal")  # Enable EPUB tab
        else:
            self.notebook.tab(2, state="disabled")  # Disable EPUB tab
    
    def log(self, message):
        """Ghi log v√†o text area (method cho GUI logs)"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_message = f"[{timestamp}] {message}"
            
            # Ki·ªÉm tra t·ªìn t·∫°i c·ªßa c√°c widget tr∆∞·ªõc khi s·ª≠ d·ª•ng
            if hasattr(self, 'log_text') and self.log_text is not None:
                self.log_text.insert(tk.END, log_message + "\n")
            if hasattr(self, 'mini_log_text') and self.mini_log_text is not None:
                self.mini_log_text.insert(tk.END, log_message + "\n")
            
            if hasattr(self, 'auto_scroll_var') and self.auto_scroll_var.get():
                if hasattr(self, 'log_text') and self.log_text is not None:
                    self.log_text.see(tk.END)
                if hasattr(self, 'mini_log_text') and self.mini_log_text is not None:
                    self.mini_log_text.see(tk.END)
                
            if hasattr(self, 'root') and self.root is not None:
                self.root.update_idletasks()
            
            print(message)  # Also print to console
        except Exception as e:
            # N·∫øu c√≥ l·ªói, ch·ªâ in ra console
            print(f"‚ö†Ô∏è L·ªói log GUI: {e} - Message: {message}")
    
    def clear_logs(self):
        """X√≥a logs"""
        try:
            if hasattr(self, 'log_text') and self.log_text is not None:
                self.log_text.delete(1.0, tk.END)
            if hasattr(self, 'mini_log_text') and self.mini_log_text is not None:
                self.mini_log_text.delete(1.0, tk.END)
            print("üóëÔ∏è ƒê√£ x√≥a logs")  # S·ª≠ d·ª•ng print thay v√¨ self.log ƒë·ªÉ tr√°nh v√≤ng l·∫∑p
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói x√≥a logs: {e}")
    
    def save_logs(self):
        """L∆∞u logs ra file"""
        file_path = filedialog.asksaveasfilename(
            title="L∆∞u logs",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(self.log_text.get(1.0, tk.END))
                self.log(f"üíæ ƒê√£ l∆∞u logs v√†o: {file_path}")
            except Exception as e:
                self.log(f"‚ùå L·ªói l∆∞u logs: {e}")
    
    def start_translation(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªãch"""
        if not TRANSLATE_AVAILABLE:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ import module d·ªãch. Vui l√≤ng ki·ªÉm tra l·∫°i file translate.py")
            return
            
        # Validate inputs
        if not self.api_key_var.get().strip():
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p API Key")
            return
            
        if not self.input_file_var.get().strip():
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn file input")
            return
            
        if not os.path.exists(self.input_file_var.get()):
            messagebox.showerror("L·ªói", "File input kh√¥ng t·ªìn t·∫°i")
            return
        
        output_file = self.output_file_var.get().strip()
        if not output_file:
            output_file = generate_output_filename(self.input_file_var.get())
            self.output_file_var.set(output_file)
            self.log(f"üìù T·ª± ƒë·ªông t·∫°o t√™n file output: {os.path.basename(output_file)}")
        
        # Check if input and output are the same
        if os.path.abspath(self.input_file_var.get()) == os.path.abspath(output_file):
            messagebox.showerror("L·ªói", "File input v√† output kh√¥ng th·ªÉ gi·ªëng nhau!")
            return
        
        # Warn if output file exists
        if os.path.exists(output_file):
            result = messagebox.askyesno(
                "C·∫£nh b√°o", 
                f"File output ƒë√£ t·ªìn t·∫°i:\n{os.path.basename(output_file)}\n\nB·∫°n c√≥ mu·ªën ghi ƒë√® kh√¥ng?",
                icon='warning'
            )
            if not result:
                return
        
        # Start translation
        self.is_translating = True
        self.translate_btn.config(state=tk.DISABLED)
        self.progress_bar.config(mode='indeterminate')
        self.progress_bar.start()
        self.progress_var.set("ƒêang d·ªãch...")
        
        # Setup log capture
        self.setup_log_capture()
        
        self.log("üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªãch...")
        self.log(f"üìÅ Input: {os.path.basename(self.input_file_var.get())}")
        self.log(f"üìÅ Output: {os.path.basename(output_file)}")
        self.log(f"ü§ñ Model: {self.model_var.get()}")
        
        # Automatically switch to logs tab to show progress
        self.notebook.select(3)  # Select logs tab (index 3)
        
        # Run in thread
        self.translation_thread = threading.Thread(
            target=self.run_translation,
            args=(self.input_file_var.get(), output_file, self.api_key_var.get(), self.model_var.get(), self.get_system_instruction()),
            daemon=True
        )
        self.translation_thread.start()
    
    def run_translation(self, input_file, output_file, api_key, model_name, system_instruction):
        """Ch·∫°y qu√° tr√¨nh d·ªãch"""
        try:
            self.start_time = time.time()
            
            # Call translate function (logs will be captured automatically)
            success = translate_file_optimized(
                input_file=input_file,
                output_file=output_file,
                api_key=api_key,
                model_name=model_name,
                system_instruction=system_instruction
            )
            
            if success:
                self.log("‚úÖ D·ªãch ho√†n th√†nh!")
                
                # Auto reformat if enabled
                if self.auto_reformat_var.get():
                    self.log("üîÑ ƒêang reformat file...")
                    try:
                        fix_text_format(output_file)
                        self.log("‚úÖ Reformat ho√†n th√†nh!")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è L·ªói reformat: {e}")
                
                # Auto convert to EPUB if enabled
                if self.auto_convert_epub_var.get() and EPUB_AVAILABLE:
                    self.log("üìö ƒêang convert sang EPUB...")
                    try:
                        self.convert_to_epub(output_file)
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è L·ªói convert EPUB: {e}")
                
                elapsed_time = time.time() - self.start_time
                self.log(f"‚è±Ô∏è Th·ªùi gian ho√†n th√†nh: {elapsed_time:.1f} gi√¢y")
                self.progress_var.set("Ho√†n th√†nh!")
                self.progress_bar.config(mode='determinate', value=100)
                messagebox.showinfo("Th√†nh c√¥ng", f"D·ªãch ho√†n th√†nh!\nFile: {output_file}")
            else:
                self.log("‚ùå D·ªãch th·∫•t b·∫°i")
                messagebox.showerror("L·ªói", "Qu√° tr√¨nh d·ªãch th·∫•t b·∫°i")
                
        except Exception as e:
            self.log(f"‚ùå L·ªói: {e}")
            messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói: {e}")
        finally:
            self.translation_finished()
    
    def translation_finished(self):
        """K·∫øt th√∫c qu√° tr√¨nh d·ªãch"""
        self.is_translating = False
        self.translate_btn.config(state=tk.NORMAL)
        self.progress_bar.stop()
        
        # Restore stdout
        self.restore_stdout()
        
        if not self.progress_var.get().startswith("Ho√†n th√†nh"):
            self.progress_var.set("S·∫µn s√†ng")
    
    def convert_to_epub(self, txt_file):
        """Convert file to EPUB"""
        if not EPUB_AVAILABLE:
            self.log("‚ùå Kh√¥ng th·ªÉ convert EPUB - thi·∫øu module ConvertEpub")
            return
        
        try:
            # Generate file paths
            base_name = os.path.splitext(txt_file)[0]
            docx_file = base_name + ".docx"
            epub_file = base_name + ".epub"
            
            # Get book info
            title = self.book_title_var.get() or os.path.splitext(os.path.basename(txt_file))[0]
            author = self.book_author_var.get() or "Unknown Author"
            pattern = self.chapter_pattern_var.get() or r"^Ch∆∞∆°ng\s+\d+:\s+.*$"
            
            # Convert TXT to DOCX
            self.log("üìÑ ƒêang convert TXT ‚Üí DOCX...")
            if txt_to_docx(txt_file, docx_file, title, pattern):
                self.log("‚úÖ Convert TXT ‚Üí DOCX ho√†n th√†nh!")
                
                # Convert DOCX to EPUB
                self.log("üìö ƒêang convert DOCX ‚Üí EPUB...")
                if docx_to_epub(docx_file, epub_file, title, author):
                    self.log(f"‚úÖ Convert EPUB ho√†n th√†nh: {epub_file}")
                else:
                    self.log("‚ùå Convert DOCX ‚Üí EPUB th·∫•t b·∫°i")
            else:
                self.log("‚ùå Convert TXT ‚Üí DOCX th·∫•t b·∫°i")
                
        except Exception as e:
            self.log(f"‚ùå L·ªói convert EPUB: {e}")
    
    def convert_to_epub_manual(self):
        """Convert file to EPUB manually"""
        if not self.epub_input_var.get():
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn file TXT ƒë·ªÉ convert")
            return
        
        if not os.path.exists(self.epub_input_var.get()):
            messagebox.showerror("L·ªói", "File kh√¥ng t·ªìn t·∫°i")
            return
        
        self.log("üìö B·∫Øt ƒë·∫ßu convert EPUB manual...")
        
        # Setup log capture for EPUB conversion
        self.setup_log_capture()
        
        # Run in thread
        convert_thread = threading.Thread(
            target=self._convert_epub_thread,
            args=(self.epub_input_var.get(),),
            daemon=True
        )
        convert_thread.start()
    
    def _convert_epub_thread(self, file_path):
        """Thread wrapper for EPUB conversion"""
        try:
            self.convert_to_epub(file_path)
        finally:
            self.restore_stdout()
    
    def save_settings(self):
        """L∆∞u c√†i ƒë·∫∑t"""
        # Get custom prompt if exists
        custom_prompt = ""
        if hasattr(self, 'custom_prompt_entry'):
            custom_prompt = self.custom_prompt_entry.get(1.0, tk.END).strip()
            
        settings = {
            "api_key": self.api_key_var.get(),
            "model": self.model_var.get(),
            "context": self.context_var.get(),
            "custom_prompt": custom_prompt,
            "auto_reformat": self.auto_reformat_var.get(),
            "auto_convert_epub": self.auto_convert_epub_var.get(),
            "book_author": self.book_author_var.get(),
            "chapter_pattern": self.chapter_pattern_var.get(),
            "threads": self.threads_var.get(),
            "chunk_size": self.chunk_size_var.get()
        }
        
        try:
            with open("settings.json", "w", encoding="utf-8") as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
            self.log("üíæ ƒê√£ l∆∞u c√†i ƒë·∫∑t")
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ l∆∞u c√†i ƒë·∫∑t!")
        except Exception as e:
            self.log(f"‚ùå L·ªói l∆∞u c√†i ƒë·∫∑t: {e}")
            messagebox.showerror("L·ªói", f"L·ªói l∆∞u c√†i ƒë·∫∑t: {e}")
    
    def load_settings(self):
        """T·∫£i c√†i ƒë·∫∑t"""
        try:
            if os.path.exists("settings.json"):
                with open("settings.json", "r", encoding="utf-8") as f:
                    settings = json.load(f)
                
                self.api_key_var.set(settings.get("api_key", ""))
                self.model_var.set(settings.get("model", "gemini-2.0-flash"))
                self.context_var.set(settings.get("context", "B·ªëi c·∫£nh hi·ªán ƒë·∫°i"))
                self.auto_reformat_var.set(settings.get("auto_reformat", True))
                self.auto_convert_epub_var.set(settings.get("auto_convert_epub", False))
                self.book_author_var.set(settings.get("book_author", "Unknown Author"))
                self.chapter_pattern_var.set(settings.get("chapter_pattern", r"^Ch∆∞∆°ng\s+\d+:\s+.*$"))
                self.threads_var.set(settings.get("threads", "10"))
                self.chunk_size_var.set(settings.get("chunk_size", "100"))
                
                # Load custom prompt if exists
                if hasattr(self, 'custom_prompt_entry') and settings.get("custom_prompt"):
                    self.custom_prompt_entry.delete(1.0, tk.END)
                    self.custom_prompt_entry.insert(1.0, settings.get("custom_prompt"))
                
                # Trigger context change to show/hide custom prompt
                self.on_context_changed()
                
                self.log("üìÇ ƒê√£ t·∫£i c√†i ƒë·∫∑t")
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói t·∫£i c√†i ƒë·∫∑t: {e}")
            
    def __del__(self):
        """Destructor ƒë·ªÉ ƒë·∫£m b·∫£o stdout ƒë∆∞·ª£c kh√¥i ph·ª•c"""
        self.restore_stdout()

def main():
    root = tk.Tk()
    app = TranslateNovelAI(root)
    
    def on_closing():
        if app.is_translating:
            if messagebox.askokcancel("Tho√°t", "ƒêang d·ªãch. B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t?"):
                app.restore_stdout()  # Ensure stdout is restored
                root.destroy()
        else:
            app.restore_stdout()  # Ensure stdout is restored
            root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.mainloop()

if __name__ == "__main__":
    main()
