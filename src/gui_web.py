import gradio as gr
import os
import sys
import time
import json
import threading
from datetime import datetime
import queue
import tempfile

# Import translate functions
try:
    from translate import translate_file_optimized, generate_output_filename
    from reformat import fix_text_format
    from ConvertEpub import txt_to_docx, docx_to_epub
    TRANSLATE_AVAILABLE = True
    EPUB_AVAILABLE = True
except ImportError as e:
    TRANSLATE_AVAILABLE = False
    EPUB_AVAILABLE = False
    print(f"‚ö†Ô∏è L·ªói import: {e}")

# CSS styling for modern look
custom_css = """
/* Main container styling */
.gradio-container {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* Header styling */
.header {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 15px;
    padding: 20px;
    margin-bottom: 20px;
    text-align: center;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.header h1 {
    color: white;
    font-size: 2.5em;
    font-weight: bold;
    margin: 0;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.header p {
    color: rgba(255, 255, 255, 0.8);
    font-size: 1.2em;
    margin: 10px 0 0 0;
}

/* Card styling */
.card {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 15px;
    padding: 20px;
    margin: 15px 0;
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
}

/* Button styling */
.translate-btn {
    background: linear-gradient(45deg, #28a745, #20c997);
    border: none;
    border-radius: 25px;
    padding: 15px 30px;
    font-size: 1.1em;
    font-weight: bold;
    color: white;
    box-shadow: 0 4px 15px 0 rgba(40, 167, 69, 0.4);
    transition: all 0.3s ease;
}

.translate-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px 0 rgba(40, 167, 69, 0.6);
}

/* Progress bar styling */
.progress-container {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    padding: 15px;
    margin: 15px 0;
}

/* Input field styling */
.input-field {
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 10px;
    color: white;
    padding: 10px;
}

.input-field::placeholder {
    color: rgba(255, 255, 255, 0.7);
}

/* Log area styling */
.log-area {
    background: rgba(0, 0, 0, 0.3);
    border-radius: 10px;
    padding: 15px;
    color: #00ff00;
    font-family: 'Courier New', monospace;
    font-size: 0.9em;
    max-height: 400px;
    overflow-y: auto;
}

/* Status indicator */
.status-ready {
    color: #28a745;
    font-weight: bold;
}

.status-working {
    color: #ffc107;
    font-weight: bold;
}

.status-error {
    color: #dc3545;
    font-weight: bold;
}

/* Animated background */
@keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

.animated-bg {
    background: linear-gradient(-45deg, #667eea, #764ba2, #667eea, #764ba2);
    background-size: 400% 400%;
    animation: gradient 15s ease infinite;
}
"""

class WebTranslateApp:
    def __init__(self):
        self.is_translating = False
        self.log_queue = queue.Queue()
        self.progress_info = {"current": 0, "total": 0, "status": "S·∫µn s√†ng"}
        
        # Settings
        self.settings = self.load_settings()
        
    def get_system_instruction(self, context, custom_prompt=""):
        """T·∫°o system instruction d·ª±a tr√™n b·ªëi c·∫£nh"""
        base_instruction = "D·ªãch vƒÉn b·∫£n sau sang ti·∫øng Vi·ªát. ƒê·∫£m b·∫£o c√°c c√¢u tho·∫°i nh√¢n v·∫≠t ƒë∆∞·ª£c d·ªãch ch√≠nh x√°c v√† ƒë·∫∑t trong d·∫•u "". ƒê·∫£m b·∫£o gi·ªØ nguy√™n chi ti·∫øt n·ªôi dung."
        
        context_instructions = {
            "B·ªëi c·∫£nh hi·ªán ƒë·∫°i": f"{base_instruction} B·ªëi c·∫£nh hi·ªán ƒë·∫°i. Gi·ªØ nguy√™n c√°c t·ª´ ng·ªØ th√¥ t·ª•c, t√¨nh d·ª•c.",
            "B·ªëi c·∫£nh c·ªï ƒë·∫°i": f"{base_instruction} B·ªëi c·∫£nh c·ªï ƒë·∫°i. S·ª≠ d·ª•ng ng√¥n ng·ªØ trang tr·ªçng, l·ªãch s·ª± ph√π h·ª£p th·ªùi k·ª≥ c·ªï ƒë·∫°i.",
            "B·ªëi c·∫£nh fantasy/vi·ªÖn t∆∞·ªüng": f"{base_instruction} B·ªëi c·∫£nh fantasy/vi·ªÖn t∆∞·ªüng. Gi·ªØ nguy√™n t√™n thu·∫≠t ng·ªØ ma thu·∫≠t, t√™n k·ªπ nƒÉng.",
            "B·ªëi c·∫£nh h·ªçc ƒë∆∞·ªùng": f"{base_instruction} B·ªëi c·∫£nh h·ªçc ƒë∆∞·ªùng. S·ª≠ d·ª•ng ng√¥n ng·ªØ tr·∫ª trung, nƒÉng ƒë·ªông.",
            "B·ªëi c·∫£nh c√¥ng s·ªü": f"{base_instruction} B·ªëi c·∫£nh c√¥ng s·ªü. S·ª≠ d·ª•ng ng√¥n ng·ªØ l·ªãch s·ª±, trang tr·ªçng.",
            "B·ªëi c·∫£nh l√£ng m·∫°n": f"{base_instruction} B·ªëi c·∫£nh l√£ng m·∫°n. Ch√∫ tr·ªçng c·∫£m x√∫c, ng√¥n ng·ªØ ng·ªçt ng√†o.",
            "B·ªëi c·∫£nh h√†nh ƒë·ªông": f"{base_instruction} B·ªëi c·∫£nh h√†nh ƒë·ªông. Gi·ªØ nguy√™n t√™n k·ªπ nƒÉng, v≈© kh√≠.",
            "T√πy ch·ªânh": custom_prompt if custom_prompt.strip() else base_instruction
        }
        
        return context_instructions.get(context, base_instruction)
    
    def log_message(self, message):
        """Th√™m message v√†o queue ƒë·ªÉ hi·ªÉn th·ªã log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        self.log_queue.put(log_entry)
        print(message)  # Also print to console
    
    def get_logs(self):
        """L·∫•y t·∫•t c·∫£ logs t·ª´ queue"""
        logs = []
        while not self.log_queue.empty():
            try:
                logs.append(self.log_queue.get_nowait())
            except queue.Empty:
                break
        return "\n".join(logs) if logs else ""
    
    def load_settings(self):
        """T·∫£i c√†i ƒë·∫∑t"""
        default_settings = {
            "api_key": "",
            "model": "gemini-2.0-flash",
            "context": "B·ªëi c·∫£nh hi·ªán ƒë·∫°i",
            "auto_reformat": True,
            "auto_convert_epub": False,
            "book_author": "Unknown Author",
            "chapter_pattern": r"^Ch∆∞∆°ng\s+\d+:\s+.*$"
        }
        
        try:
            if os.path.exists("settings.json"):
                with open("settings.json", "r", encoding="utf-8") as f:
                    saved_settings = json.load(f)
                    default_settings.update(saved_settings)
            self.log_message("üìÇ ƒê√£ t·∫£i c√†i ƒë·∫∑t")
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è L·ªói t·∫£i c√†i ƒë·∫∑t: {e}")
        
        return default_settings
    
    def save_settings(self, api_key, model, context, auto_reformat, auto_epub, book_author, chapter_pattern):
        """L∆∞u c√†i ƒë·∫∑t"""
        settings = {
            "api_key": api_key,
            "model": model,
            "context": context,
            "auto_reformat": auto_reformat,
            "auto_convert_epub": auto_epub,
            "book_author": book_author,
            "chapter_pattern": chapter_pattern
        }
        
        try:
            with open("settings.json", "w", encoding="utf-8") as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
            self.log_message("üíæ ƒê√£ l∆∞u c√†i ƒë·∫∑t")
            return "‚úÖ ƒê√£ l∆∞u c√†i ƒë·∫∑t th√†nh c√¥ng!"
        except Exception as e:
            self.log_message(f"‚ùå L·ªói l∆∞u c√†i ƒë·∫∑t: {e}")
            return f"‚ùå L·ªói l∆∞u c√†i ƒë·∫∑t: {e}"
    
    def translate_file(self, input_file, api_key, model, context, custom_prompt, auto_reformat, auto_epub, book_title, book_author, chapter_pattern, progress=gr.Progress()):
        """Th·ª±c hi·ªán d·ªãch file"""
        
        if not TRANSLATE_AVAILABLE:
            return None, "‚ùå Kh√¥ng th·ªÉ import module d·ªãch"
        
        if not input_file:
            return None, "‚ùå Vui l√≤ng ch·ªçn file input"
        
        if not api_key.strip():
            return None, "‚ùå Vui l√≤ng nh·∫≠p API Key"
        
        # Reset progress
        self.progress_info = {"current": 0, "total": 0, "status": "ƒêang b·∫Øt ƒë·∫ßu..."}
        
        try:
            self.is_translating = True
            self.log_message("üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªãch...")
            
            # Generate output filename
            output_file = generate_output_filename(input_file.name)
            self.log_message(f"üìÅ Input: {os.path.basename(input_file.name)}")
            self.log_message(f"üìÅ Output: {os.path.basename(output_file)}")
            self.log_message(f"ü§ñ Model: {model}")
            
            # Get system instruction
            system_instruction = self.get_system_instruction(context, custom_prompt)
            self.log_message(f"üéØ Context: {context}")
            
            # Copy input file to temp location for processing
            temp_input = tempfile.NamedTemporaryFile(delete=False, suffix='.txt')
            with open(input_file.name, 'rb') as src:
                temp_input.write(src.read())
            temp_input.close()
            
            # Run translation
            success = translate_file_optimized(
                input_file=temp_input.name,
                output_file=output_file,
                api_key=api_key,
                model_name=model,
                system_instruction=system_instruction
            )
            
            if success:
                self.log_message("‚úÖ D·ªãch ho√†n th√†nh!")
                
                # Auto reformat if enabled
                if auto_reformat:
                    self.log_message("üîÑ ƒêang reformat file...")
                    try:
                        fix_text_format(output_file)
                        self.log_message("‚úÖ Reformat ho√†n th√†nh!")
                    except Exception as e:
                        self.log_message(f"‚ö†Ô∏è L·ªói reformat: {e}")
                
                # Auto convert to EPUB if enabled
                if auto_epub and EPUB_AVAILABLE:
                    self.log_message("üìö ƒêang convert sang EPUB...")
                    try:
                        self.convert_to_epub(output_file, book_title, book_author, chapter_pattern)
                    except Exception as e:
                        self.log_message(f"‚ö†Ô∏è L·ªói convert EPUB: {e}")
                
                self.progress_info["status"] = "Ho√†n th√†nh!"
                
                # Clean up temp file
                os.unlink(temp_input.name)
                
                return output_file, "‚úÖ D·ªãch ho√†n th√†nh th√†nh c√¥ng!"
            else:
                return None, "‚ùå Qu√° tr√¨nh d·ªãch th·∫•t b·∫°i"
                
        except Exception as e:
            self.log_message(f"‚ùå L·ªói: {e}")
            return None, f"‚ùå ƒê√£ x·∫£y ra l·ªói: {e}"
        finally:
            self.is_translating = False
    
    def convert_to_epub(self, txt_file, book_title, book_author, chapter_pattern):
        """Convert file to EPUB"""
        try:
            base_name = os.path.splitext(txt_file)[0]
            docx_file = base_name + ".docx"
            epub_file = base_name + ".epub"
            
            title = book_title or os.path.splitext(os.path.basename(txt_file))[0]
            author = book_author or "Unknown Author"
            pattern = chapter_pattern or r"^Ch∆∞∆°ng\s+\d+:\s+.*$"
            
            # Convert TXT to DOCX
            self.log_message("üìÑ ƒêang convert TXT ‚Üí DOCX...")
            if txt_to_docx(txt_file, docx_file, title, pattern):
                self.log_message("‚úÖ Convert TXT ‚Üí DOCX ho√†n th√†nh!")
                
                # Convert DOCX to EPUB
                self.log_message("üìö ƒêang convert DOCX ‚Üí EPUB...")
                if docx_to_epub(docx_file, epub_file, title, author):
                    self.log_message(f"‚úÖ Convert EPUB ho√†n th√†nh: {epub_file}")
                else:
                    self.log_message("‚ùå Convert DOCX ‚Üí EPUB th·∫•t b·∫°i")
            else:
                self.log_message("‚ùå Convert TXT ‚Üí DOCX th·∫•t b·∫°i")
                
        except Exception as e:
            self.log_message(f"‚ùå L·ªói convert EPUB: {e}")

def create_interface():
    """T·∫°o giao di·ªán Gradio"""
    app = WebTranslateApp()
    
    with gr.Blocks(css=custom_css, title="ü§ñ TranslateNovelAI", theme=gr.themes.Soft()) as interface:
        
        # Header
        gr.HTML("""
        <div class="header animated-bg">
            <h1>ü§ñ TranslateNovelAI</h1>
            <p>Modern Web Edition - D·ªãch truy·ªán b·∫±ng AI</p>
        </div>
        """)
        
        with gr.Row():
            # Left column - Main controls
            with gr.Column(scale=2):
                with gr.Group():
                    gr.Markdown("### üìÅ File Management")
                    
                    input_file = gr.File(
                        label="üìÇ Ch·ªçn file truy·ªán c·∫ßn d·ªãch",
                        file_types=[".txt"],
                        elem_classes=["input-field"]
                    )
                    
                    output_file = gr.File(
                        label="üì• File ƒë√£ d·ªãch",
                        interactive=False
                    )
                
                with gr.Group():
                    gr.Markdown("### üîë API Configuration")
                    
                    api_key = gr.Textbox(
                        label="Google AI API Key",
                        type="password",
                        placeholder="Nh·∫≠p API Key c·ªßa b·∫°n...",
                        value=app.settings.get("api_key", ""),
                        elem_classes=["input-field"]
                    )
                    
                    with gr.Row():
                        model = gr.Dropdown(
                            label="Model",
                            choices=["gemini-2.0-flash", "gemini-1.5-flash", "gemini-1.5-pro"],
                            value=app.settings.get("model", "gemini-2.0-flash")
                        )
                        
                        context = gr.Dropdown(
                            label="B·ªëi c·∫£nh d·ªãch",
                            choices=[
                                "B·ªëi c·∫£nh hi·ªán ƒë·∫°i",
                                "B·ªëi c·∫£nh c·ªï ƒë·∫°i",
                                "B·ªëi c·∫£nh fantasy/vi·ªÖn t∆∞·ªüng",
                                "B·ªëi c·∫£nh h·ªçc ƒë∆∞·ªùng",
                                "B·ªëi c·∫£nh c√¥ng s·ªü",
                                "B·ªëi c·∫£nh l√£ng m·∫°n",
                                "B·ªëi c·∫£nh h√†nh ƒë·ªông",
                                "T√πy ch·ªânh"
                            ],
                            value=app.settings.get("context", "B·ªëi c·∫£nh hi·ªán ƒë·∫°i")
                        )
                
                # Custom prompt (conditionally visible)
                custom_prompt = gr.Textbox(
                    label="Custom Prompt",
                    placeholder="Nh·∫≠p prompt t√πy ch·ªânh...",
                    lines=3,
                    visible=False,
                    elem_classes=["input-field"]
                )
                
                with gr.Group():
                    gr.Markdown("### ‚öôÔ∏è Settings")
                    
                    with gr.Row():
                        auto_reformat = gr.Checkbox(
                            label="Auto reformat after translation",
                            value=app.settings.get("auto_reformat", True)
                        )
                        
                        auto_epub = gr.Checkbox(
                            label="Auto convert to EPUB",
                            value=app.settings.get("auto_convert_epub", False)
                        )
                
                # EPUB settings (conditionally visible)
                with gr.Group(visible=False) as epub_settings:
                    gr.Markdown("### üìö EPUB Settings")
                    
                    book_title = gr.Textbox(
                        label="Ti√™u ƒë·ªÅ s√°ch",
                        placeholder="T·ª± ƒë·ªông t·ª´ t√™n file...",
                        elem_classes=["input-field"]
                    )
                    
                    with gr.Row():
                        book_author = gr.Textbox(
                            label="T√°c gi·∫£",
                            value=app.settings.get("book_author", "Unknown Author"),
                            elem_classes=["input-field"]
                        )
                        
                        chapter_pattern = gr.Textbox(
                            label="Pattern nh·∫≠n di·ªán ch∆∞∆°ng (regex)",
                            value=app.settings.get("chapter_pattern", r"^Ch∆∞∆°ng\s+\d+:\s+.*$"),
                            elem_classes=["input-field"]
                        )
                
                # Action buttons
                with gr.Row():
                    translate_btn = gr.Button(
                        "üöÄ B·∫Øt ƒê·∫ßu D·ªãch",
                        variant="primary",
                        size="lg",
                        elem_classes=["translate-btn"]
                    )
                    
                    save_btn = gr.Button(
                        "üíæ L∆∞u C√†i ƒê·∫∑t",
                        variant="secondary"
                    )
            
            # Right column - Status and logs
            with gr.Column(scale=1):
                with gr.Group():
                    gr.Markdown("### üìä Progress & Status")
                    
                    status_text = gr.Textbox(
                        label="Tr·∫°ng th√°i",
                        value="S·∫µn s√†ng",
                        interactive=False,
                        elem_classes=["status-ready"]
                    )
                    
                    progress_bar = gr.Progress()
                
                with gr.Group():
                    gr.Markdown("### üìù Logs")
                    
                    log_output = gr.Textbox(
                        label="",
                        lines=15,
                        max_lines=20,
                        interactive=False,
                        elem_classes=["log-area"],
                        show_label=False
                    )
                    
                    with gr.Row():
                        refresh_logs_btn = gr.Button("üîÑ Refresh Logs", size="sm")
                        clear_logs_btn = gr.Button("üóëÔ∏è Clear Logs", size="sm")
        
        # Event handlers
        def toggle_custom_prompt(context_value):
            return gr.update(visible=(context_value == "T√πy ch·ªânh"))
        
        def toggle_epub_settings(auto_epub_value):
            return gr.update(visible=auto_epub_value)
        
        def auto_fill_book_title(file):
            if file:
                filename = os.path.splitext(os.path.basename(file.name))[0]
                return gr.update(value=filename)
            return gr.update()
        
        def refresh_logs():
            return app.get_logs()
        
        def clear_logs():
            # Clear the queue
            while not app.log_queue.empty():
                try:
                    app.log_queue.get_nowait()
                except queue.Empty:
                    break
            return ""
        
        # Connect events
        context.change(toggle_custom_prompt, inputs=[context], outputs=[custom_prompt])
        auto_epub.change(toggle_epub_settings, inputs=[auto_epub], outputs=[epub_settings])
        input_file.change(auto_fill_book_title, inputs=[input_file], outputs=[book_title])
        
        translate_btn.click(
            app.translate_file,
            inputs=[input_file, api_key, model, context, custom_prompt, auto_reformat, auto_epub, book_title, book_author, chapter_pattern],
            outputs=[output_file, status_text]
        )
        
        save_btn.click(
            app.save_settings,
            inputs=[api_key, model, context, auto_reformat, auto_epub, book_author, chapter_pattern],
            outputs=[status_text]
        )
        
        refresh_logs_btn.click(refresh_logs, outputs=[log_output])
        clear_logs_btn.click(clear_logs, outputs=[log_output])
        
        # Auto-refresh logs every 2 seconds
        interface.load(refresh_logs, outputs=[log_output], every=2)
    
    return interface

def main():
    """Ch·∫°y ·ª©ng d·ª•ng web"""
    interface = create_interface()
    
    # Launch with custom settings
    interface.launch(
        server_name="0.0.0.0",  # Allow external access
        server_port=7860,       # Default Gradio port
        share=False,            # Set to True to create public link
        show_error=True,
        favicon_path=None,
        app_kwargs={
            "docs_url": None,   # Disable docs
            "redoc_url": None   # Disable redoc
        }
    )

if __name__ == "__main__":
    main() 